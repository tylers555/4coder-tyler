#if !defined(FCODER_LEX_GEN_HAND_WRITTEN)
#define FCODER_LEX_GEN_HAND_WRITTEN

internal u64
lexeme_hash(u64 seed, u8 *ptr, u64 size){
    u64 result = 0;
    for (u64 i = 0; i < size; i += 1, ptr += 1){
        result ^= ((*ptr) ^ result*59) + seed;
    }
    return(result);
}

internal Lexeme_Table_Lookup
lexeme_table_lookup(u64 *hash_array, String_Const_u8 *key_array, 
                    Lexeme_Table_Value *value_array, i32 slot_count, u64 seed,
                    u8 *ptr, u64 size){
    Lexeme_Table_Lookup result = {};
    u64 hash = lexeme_hash(seed, ptr, size);
    u64 comparison_hash = hash | 1;
    i32 first_index = (hash % slot_count);
    i32 index = first_index;
    for (;;){
        if (hash_array[index] == comparison_hash){
            if (string_match(SCu8(ptr, size), key_array[index])){
                result.found_match = true;
                result.base_kind = value_array[index].base_kind;
                result.sub_kind = value_array[index].sub_kind;
                break;
            }
        }
        else if (hash_array[index] == 0){
            break;
        }
        index += 1;
        if (index == slot_count){
            index = 0;
        }
        if (index == first_index){
            break;
        }
    }
    return(result);
}

#endif
u64 glsl_main_keys_hash_array[1357] = {
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xacf57f03c198277b,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x8ada2c47cc6c63ed,
0xdcb756d54bee3619,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x7d0f4f03601e2ba7,0x0000000000000000,
0xd8d8a6ba60289c79,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x407f9e436301e919,0x0000000000000000,0xb75ad4eb2a2c76ad,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xedd09f3864f0c885,
0x72f52783b5a89c79,0x0000000000000000,0x342fa8b4ebb1dead,0xda71eb596f6935db,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x1fab05b9919c615b,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x416e2b11ee67711d,
0x9a5dc703ad54dfb7,0x0000000000000000,0x7d0f4f056c4ea319,0x001ffcbd7bed325b,
0x7d0f4f056c4ea31b,0x7d0f4f056c4ea31b,0x0000000000000000,0x0000000000000000,
0x7d0f4f0363a8ef9d,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x342fa8b4ebb10571,
0x0000000000000000,0x7d0f4f05cd4b6f41,0x7d0f4f05cd4b6f41,0x0000000000000000,
0x2d0abf4a2b3197bd,0xbd6c7dedf55d9bcd,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x7d0f4f05cd4b6f4b,
0x0000000000000000,0xbb9fefa60c459f89,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xecc9deb21f1cfe3b,0x4beea42606fba9f9,0x0000000000000000,
0x539e7c383b697249,0x0000000000000000,0x0000000000000000,0x7d0f4f037c659195,
0xdc76790bba1ad7a3,0x7d0f4f037ffe2a51,0x9141ddc91891e919,0xf8a0610d5c453ead,
0x0000000000000000,0x0d729f33fc97afaf,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x303f9e90b5f6a7d9,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x001ffcbd7be3dbeb,0x0000000000000000,0x0000000000000000,
0xb346e71fcb5b507b,0x0000000000000000,0x30c376aa90b3c249,0xd18aea354a9e68ad,
0x0000000000000000,0x0000000000000000,0xbb9fefa60c5eada1,0xf499bfbfb63cf84b,
0x0000000000000000,0x0000000000000000,0x42353f786c8e4e29,0xe7c305c2e57ebafd,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x4beea9eebc5e1fa5,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x70d5be189b701f09,0x70d5be189b701f09,
0x70d5be189b701f0b,0x0000000000000000,0xa3b73cc0b2d69fa5,0x0000000000000000,
0x946f0c1a367b7f85,0xc724c432a616e009,0x0000000000000000,0x9a5488cb958a8597,
0x2634d4a53176696b,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xa5a52d95762f8efd,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x7d0f4f03679d4337,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x7d0f4f0363703e87,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x342fa8b4ebb1851b,0x8d3a8d0104d7316b,0x4cae00ce3fd4f249,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x70d59fa87299857f,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xbb9fefa60c5f7759,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xf1e015cd533d4cc9,0x0000000000000000,0x4708f9bc1eedef17,
0x0000000000000000,0x70d5b3d6fb498663,0xdd7f565b6301e919,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0def42b9c42a57cd,0x6717786503069111,
0x0a471bcb33565b8f,0xba9a76be6c6cc30b,0x0000000000000000,0x94007551cc6d8c69,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x2634d49a523a0771,0x0000000000000000,0x0000000000000000,
0x2634d49a523a0775,0x0000000000000000,0x2634d4b628990c73,0x0000000000000000,
0x7d0f4f05643d130b,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x2634d49a523a077f,0x2634d49a523a077f,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x82f3a7c3a38f4007,
0xa21ba4bd4cfd27b7,0x097dfd24a95e587b,0xdc9afc452091e919,0x087f829a9891e919,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xb3a61eb990289c79,0x0000000000000000,0xd00b58fb6b01e919,
0xb2d29fc024d6d9ff,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0d729f33fc934c8b,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x15629deb5d7aa77b,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x5a3e7c27261dc39b,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xbb9fefa60c44e6c5,0x0000000000000000,0x7d0f4f05713b85bf,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xbb9fefa6039972ab,0x70d5b3cf5efed7d9,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x342fa8b4ebb10651,
0x0000000000000000,0x7d0f4f037c65925b,0x0000000000000000,0xbb9fefa60395adf7,
0x0000000000000000,0x0000000000000000,0x70d5b3cd995cd9f9,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x2634d4a50c2dbc7d,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0d729f3396b32537,0x2f8b28ee3fd4f249,0x0a4956d1c71efe3b,0x0000000000000000,
0xab90a8e69e12237b,0x0000000000000000,0x342fa8b4ebb1efa3,0x0000000000000000,
0x0000000000000000,0x0aa23ce319bae037,0xcdd4d75bb3fabcb5,0xf75a8137744690af,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x3405baa44496e195,0x0000000000000000,
0x0000000000000000,0xb2d414d45c23266b,0x2634d49aa098ddd9,0xbb9fefa60c4c50ab,
0x0000000000000000,0x0000000000000000,0x691db4fec68c81b3,0xb1fe71e5131f557d,
0x0000000000000000,0x70d59ff24acdc035,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x3d353f786c8e4e29,0x20a10fb95860b8b9,
0x0000000000000000,0x0000000000000000,0x8408c83e38b3f87b,0x0000000000000000,
0x95103dffc845f6ad,0x47f3173112e7829b,0x0000000000000000,0x0000000000000000,
0xa4506f404c9b57cd,0x0000000000000000,0x860a1cc0f6adef17,0xa21baa991364dfb7,
0xd4fd47bef8ce206b,0x0000000000000000,0x52edcb6c265f557d,0x63d587593b7401a3,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x82f3a7c3a38f407f,
0xcb896e0122409149,0x0000000000000000,0x7d0f4f0571395435,0xf92592890be392f5,
0x8d3a8d0e5cb880ad,0x4ced52d06b01e919,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xb6c4f46847869fa5,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x7d0f4f05718a54eb,0x342fa8b4ebb106ab,0x0000000000000000,0x0000000000000000,
0x0b81a5590f86dd1d,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x001fe9373e4866db,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x2634d4a496c62f09,0x2634d4a496c62f09,0x2634d4a496c62f0b,
0x0000000000000000,0x0000000000000000,0xbb9fefa60c4442ed,0xbf2f53c43fd4f249,
0x0000000000000000,0xbb9fefa603996885,0x0000000000000000,0xbb9fefa60c6cddc7,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0a49c476607d5dfb,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xecc9deb21f1cff85,
0x0000000000000000,0xbb9fefa60c6b8a99,0x9900c6f5fc2cb15b,0xbb9fefa60c6b8a9b,
0xbb9fefa60c6b8a9b,0xab90a8e69e1223eb,0x0000000000000000,0x5c50f044cd3e2faf,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x342fa8b4ebb1a5e3,0x0000000000000000,0x0000000000000000,0x001ffcbd7beceeef,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x387fd833cdc07505,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xfff123995860b8b9,0x0000000000000000,0x7d0f4f0363584a99,
0x0000000000000000,0x7d0f4f0363584a9b,0x7d0f4f0363584a9b,0x70d59f40a10f094f,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xf89368fc30998111,0x0000000000000000,0x0000000000000000,
0xab90a8e69e13b6ef,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x29412103e5a89c79,0xb1fe7047c8af8efd,0x0000000000000000,0xa90cb4164437829b,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x7d0f4f0365ca5287,
0x0000000000000000,0x0b3cf1e94cd61175,0xc89b1a34eb01e919,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x7d0f4f037e10d8bb,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xb94dfe3bb65e68ad,0x0000000000000000,
0x0000000000000000,0xbb9fefa603b7b941,0xbb9fefa603b7b941,0xf921a0fcace88f9d,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x141956712efcf2b9,0xa4c8c85e1ee0930b,0x0000000000000000,0xbb9fefa603b7b94b,
0x7d0f4f057131eb19,0x0000000000000000,0x7d0f4f057131eb1b,0x7d0f4f057131eb1b,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xe58bb428695b5789,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x97d42ef95ea947d9,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xbed207f3404be129,
0x0000000000000000,0x0000000000000000,0x1060cb470fea81a3,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xbb9fefa60c4e78cf,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xf6f436ad4f3369c9,0x0000000000000000,0x946f1f848d0a3563,
0x0000000000000000,0xd04fd5b475824e7f,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x72968862c122afaf,0x0000000000000000,0x0000000000000000,0x7773ce0a990be051,
0x0000000000000000,0x6504349c40289c79,0x0000000000000000,0x0000000000000000,
0x11cd57e2f03e2faf,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xbb9fefa6039cf8f5,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x27d9a63251c16cbf,0x0000000000000000,0x0000000000000000,
0xd2964c4dada77fdf,0xd4d5bd7c6c8e4e29,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x097d003602e243d9,0x0000000000000000,
0x0000000000000000,0xc724f363dff30f9d,0x4ab6065839974cc9,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xf921e7ff9ca7f1ff,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x2634d4a496c4a7a1,
0x2634d4a496c4a7a1,0xb2d463f341a82c8b,0x7d0f4f0568159e19,0xed0534cca6cccffb,
0x0000000000000000,0xbb9fefa60c4fc703,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x2634d4a496c4a7ab,0xe537d4f9e1bc0fa9,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x70d5b3ebf9242229,
0x0000000000000000,0x1d8577ec5860b8b9,0x0000000000000000,0x0000000000000000,
0x3390e5d96b62b2b9,0x7d0f4f0360b90a99,0x0000000000000000,0x7d0f4f0360b90a9b,
0x7d0f4f0360b90a9b,0x0a4956d1c71eff85,0xe770a86e34e8e919,0x0000000000000000,
0x0000000000000000,0x946f0c1a367b7c29,0x0d167994d7c91899,0x0e89b14c878ab2b9,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xa0597ed02ca2a719,0x0000000000000000,
0xa0597ed02ca2a71b,0x2634d4a496c1cc51,0xa0597ed02ca2a71b,0x04279d8e421c9749,
0x2634d4a496c1cc51,0x0000000000000000,0x7d0f4f0360d29d2d,0x342fa8b4ebcf42ed,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xa0597ed02ca2a725,
0x0000000000000000,0xa91489dc3582c95b,0x0000000000000000,0x7d0f4f0366610661,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x5f2c1db1eafb9ddd,0x44cf9dc375838111,0xbad26c0b983ee3ed,0x2634d4a496c1cc6b,
0x0000000000000000,0x0000000000000000,0x9a20eeda7d60ad19,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xf10231e4caeca3db,
0x0000000000000000,0x0029e476e301e919,0xbb04c5a112544e29,0x0000000000000000,
0xbb9fefa60395bf77,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x7c8a402a0e67711d,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xace3d73cda5adab1,
0x0d4151538f514c8b,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x342fa8b4ebb04e7f,0x9daf0751bfd4f249,0xc400d37ad056e195,0x06272ece226935db,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x94007551cc2643db,0x7d0f4f05647c7c07,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x17bf0e77ec289c79,0x0000000000000000,0x0000000000000000,0x9a5de4208a6d27b7,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x860c843a25f6cf17,0x0000000000000000,0x0000000000000000,0xd4d2aca4617276ad,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x9c47f6885860b8b9,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xa38b909a536f52fb,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x14eeb31ef7b604fb,0x40735eb4ffd3215b,0x0000000000000000,0xb2d462080d10ece7,
0x2634d49bd29ebc15,0x0000000000000000,0x0000000000000000,0x78063d996b86dd1d,
0xae26149f6a874589,0x6e5308a43fd4f249,0x0000000000000000,0x19415268a301e919,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x4e735221e64be129,0x78b8a4ab6b01e919,0x0000000000000000,0x043b6f36984ab7ef,
0x0000000000000000,0xbb9fefa603b6919d,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xf59b0029860adbfb,0x0000000000000000,0x0000000000000000,
0x342fa8b4ebb0e343,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x70d5be68d8e45cbf,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x2634d4b334c51feb,0xd25040a8e61ef2b9,
0x9d676d382b1e587b,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x7de8aabe08d69fa5,0x0000000000000000,0x0000000000000000,0x342fa8b4ebb0a3c5,
0x0000000000000000,0x0000000000000000,0xa6610911bfd4f249,0x0000000000000000,
0x0000000000000000,0x05673057b5838111,0x0000000000000000,0x0000000000000000,
0xbb9fefa60c6dfdc9,0x4c9f514b91798bbf,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x82f3a7c3a38f47bd,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xa014df3ab437829b,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0a5e73ca6c2750f7,0x5a5dc6e03fac011b,
0x0000000000000000,0x4a855a9bb877829b,0xbb9fefa60392109b,0xab90a8e69e12f9b9,
0x7f7e286c3b1ca3cd,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xf37ff255a1544e29,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x046563384a2c76ad,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xb2d295ac199e0ddd,0x0a890e885860b8b9,0x94007551cee1ede7,0xb2f7dba112544e29,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xbb9fefa603b36c47,
0xbb9fefa603b36c47,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xecc9deb21f1cfc29,0x001ffcbd7bed35b9,0x0000000000000000,0xa5a52c65199f557d,
0x8fe6faf640bc25eb,0x0a49d85be9fcdbcd,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xf92580ac8f7edbfb,0x9ed1e498d43e2faf,
0x7d0f4f037c712d45,0x10608d7be856b1a3,0x2634d4a566199c2f,0x0000000000000000,
0x0000000000000000,0xa29a8b1736d1f57f,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x861826636301e919,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x515a910761ec6f9d,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xfb15396d6aedaf9d,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xbb9fefa6038d2df5,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x3b12414be90f0cf1,0x62d56e418c8ebafd,0x0000000000000000,0x0000000000000000,
0x0a47d6ba0a3317a5,0x0000000000000000,0x0000000000000000,0xe651d87ac74b27a3,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xf503c94b8f82fc99,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x82aaf0b5eea8417d,0xccc89f068837829b,
0x0000000000000000,0x0000000000000000,0x342fa8b4ebb1cd2d,0x0000000000000000,
0x048cfd234ced9ddb,0x0000000000000000,0x7d0f4f05cd987479,0x62d6dc4dbecc0fa9,
0x0000000000000000,0x5984a6fadf0b215b,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x9a20338cf5cdf51d,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x70d59f40a10f7acb,0xf30144cf68998111,
0x0638e98fef8be129,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x342fa8b4ebb10929,
0xf93a53b07b4b91b3,0x7f9760885860b8b9,0x0000000000000000,0x0000000000000000,
0x70d5b3f2b4981fa5,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xbb9fefa60c5c0ab1,0x0714c195723727fb,
0x0af8e1c303ab12f5,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xa5957cc3b78ab2b9,0x2634d4a4b0912515,0xdd540aa669544e29,
0xab90a8e69e12fa5b,0x0000000000000000,0x0000000000000000,0xd35bdeb8537de0ad,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x9d676d96231243d9,0x0000000000000000,0x0000000000000000,
0x39cc4fa81891e919,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x2634d4b3396bd637,0x0000000000000000,0x0000000000000000,0xddba012f32def2b9,
0x0000000000000000,0x0000000000000000,0x6b7dd0685860b8b9,0x3eb6db86d44527d9,
0xd8145f06184687d9,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xf9216dd4d9fcde1b,0xaf6dbc20d8bc1def,0x0a55ef24c4ba270b,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x342fa8b4ebb0a4af,0x47dc017c6c8e4e29,0xc7487f5edbcca3db,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x9176e9a4cb80bc6d,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0d46824937144e29,0x0d2e67a3206a20bb,
0x0a0117a43fd4f249,0x0000000000000000,0x4511795bf466a7a3,0x0addd20ae0d09149,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x470f1c311d36cf17,
0x0000000000000000,0xa2e5b3b1d4328597,0x0000000000000000,0x7d0f4f03666b8ce5,
0x47173276e301e919,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xacddfd75578ee015,0x2417e71992c7f6ad,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x5d43f7f01891e919,0x0000000000000000,0x342fa8b4ebb0ef17,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xb2d88e814b39a449,
0x0000000000000000,0x0a4956d1c71efc29,0x0000000000000000,0x0000000000000000,
0x0b9ca9aa08bb70c5,0x70d59fce61b017ab,0x0b9ca9aa08bb70c5,0x0000000000000000,
0x0000000000000000,0x8408c9f690313049,0x5ce7f827f877829b,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x14eeb31ef9f1c39b,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0b9ca9aa08bb70d9,0x0b9ca9aa08bb70d9,0x0b9ca9aa08bb70db,0x0b9ca9aa08bb70db,
0x0000000000000000,0x0000000000000000,0x0b9ca9aa08bb70df,0x0b9ca9aa08bb70df,
0x0000000000000000,0x0a47d6baf1e809db,0x0000000000000000,0x0000000000000000,
0xf6850267821439bb,0x0000000000000000,0x342fa8b4ebb119ab,0x946f0c1a367b7e3b,
0x0000000000000000,0xae29efb2700f8905,0x0000000000000000,0x91be41638b4ebc6d,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x15629deb082a64bb,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x342fa8b4ebb0e4b9,
0x907f6fd61891e919,0x0000000000000000,0x2634d49aa055a049,0x0000000000000000,
0x0000000000000000,0x013b89fcccc057cd,0x0000000000000000,0x0000000000000000,
0x1c8e1d395e4287fb,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0deda78ccd4665db,0xb397a55f19d8386b,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x7d0f4f03666a8ed3,0xf77b6f39b267829b,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xbb9fefa6038d595b,0x1c1edeb7688eaac9,
0x0000000000000000,0x7773cd48e74a116f,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0xc622d7a5ffee716f,
0x0d29f37990ff7f19,0x0000000000000000,0x0d29f37990ff7f1b,0x0d29f37990ff7f1b,
0x0000000000000000,0x08d6ad09b2a947d9,0x244dbbee0c84acb9,0x0000000000000000,
0x70d5be189b4817a1,0x70d5be189b4817a1,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x70d5b3cf5e29da79,0xd5cedf39e42687d9,0x0d29f37990ff7f25,
0x0000000000000000,0x0000000000000000,0x70d5be189b4817ab,0x0000000000000000,
0x1f38036b106243d9,0x0000000000000000,0x7d0f4f05cd9bbb07,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x70d5be189b488c51,0x70d5be189b488c51,
0x0000000000000000,0xf92593660b391549,0x0000000000000000,0xea61dbad73877fdf,
0x0000000000000000,0xb5f7f9ec913804fb,0x5e94400f1f86dd1d,0x0000000000000000,
0x0000000000000000,0x52edcb199e2f8efd,0x0000000000000000,0xbb9fefa60c453f7d,
0xbf42d7019e289c79,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x3937db6b851df57f,0x76759e9ab1b16cbf,
0x70d5be189b488c6b,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x70781948f66d59ff,0xb69a144fb4e8e919,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x342fa8b4ebb0babb,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0xf9216dd5139ac56f,0x0000000000000000,0x0000000000000000,
0x0232b59d8222f481,0x0000000000000000,0x0000000000000000,0x70d5be196ab4d07b,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0xb5f7f9ec892dc39b,0xa295c8d850d2b1ab,0xdcfb841ff980bc6d,0x7745712b6b01e919,
0x0000000000000000,0x0000000000000000,0x342fa8b4ebb09b07,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0xf9216dd4aeb509af,0xf9228b254ccf1175,
0x2634d49ba50a068f,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x1f3803d8a95e587b,0xd349f18847869fa5,
0x59937d272da4b635,0x0000000000000000,0xa0d2b4307b2b27a3,0x3c2a5c069d4dc01b,
0x0000000000000000,0x0000000000000000,0x7d0f4f057189eead,0x0000000000000000,
0x3170d7d1ee67711d,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x1da5f72d758635db,0x0000000000000000,0x001ffcbd7be3db7b,0x70d5be68d7f25b4b,
0x0000000000000000,0x5a3e7c27513804fb,0xfb6b469cb18a76ad,0xf8a0664de7d6737b,
0x0000000000000000,
};
u8 glsl_main_keys_key_array_5[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6c,0x69,0x70,0x50,0x6c,0x61,0x6e,0x65,0x73,};
u8 glsl_main_keys_key_array_11[] = {0x67,0x6c,0x5f,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x4d,0x61,0x74,0x72,0x69,0x78,};
u8 glsl_main_keys_key_array_12[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x69,0x65,0x77,0x70,0x6f,0x72,0x74,0x73,};
u8 glsl_main_keys_key_array_18[] = {0x61,0x74,0x61,0x6e,0x68,};
u8 glsl_main_keys_key_array_20[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_29[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x45,0x76,0x61,0x6c,0x75,0x61,0x74,0x69,0x6f,0x6e,0x49,0x6e,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_31[] = {0x67,0x6c,0x5f,0x4d,0x69,0x6e,0x50,0x72,0x6f,0x67,0x72,0x61,0x6d,0x54,0x65,0x78,0x65,0x6c,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_35[] = {0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,};
u8 glsl_main_keys_key_array_36[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_38[] = {0x6f,0x75,0x74,};
u8 glsl_main_keys_key_array_39[] = {0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x53,0x69,0x7a,0x65,};
u8 glsl_main_keys_key_array_43[] = {0x45,0x6e,0x64,0x53,0x74,0x72,0x65,0x61,0x6d,0x50,0x72,0x69,0x6d,0x69,0x74,0x69,0x76,0x65,};
u8 glsl_main_keys_key_array_47[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_48[] = {0x70,0x61,0x63,0x6b,0x55,0x6e,0x6f,0x72,0x6d,0x34,0x78,0x38,};
u8 glsl_main_keys_key_array_50[] = {0x64,0x76,0x65,0x63,0x34,};
u8 glsl_main_keys_key_array_51[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x4d,0x69,0x6e,};
u8 glsl_main_keys_key_array_52[] = {0x64,0x76,0x65,0x63,0x32,};
u8 glsl_main_keys_key_array_53[] = {0x64,0x76,0x65,0x63,0x33,};
u8 glsl_main_keys_key_array_56[] = {0x65,0x71,0x75,0x61,0x6c,};
u8 glsl_main_keys_key_array_63[] = {0x6d,0x61,0x78,};
u8 glsl_main_keys_key_array_65[] = {0x64,0x6d,0x61,0x74,0x32,};
u8 glsl_main_keys_key_array_66[] = {0x64,0x6d,0x61,0x74,0x33,};
u8 glsl_main_keys_key_array_68[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x50,0x72,0x6f,0x6a,0x4c,0x6f,0x64,};
u8 glsl_main_keys_key_array_69[] = {0x45,0x6d,0x69,0x74,0x53,0x74,0x72,0x65,0x61,0x6d,0x56,0x65,0x72,0x74,0x65,0x78,};
u8 glsl_main_keys_key_array_75[] = {0x64,0x6d,0x61,0x74,0x34,};
u8 glsl_main_keys_key_array_77[] = {0x63,0x61,0x73,0x65,};
u8 glsl_main_keys_key_array_85[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,};
u8 glsl_main_keys_key_array_86[] = {0x62,0x69,0x74,0x66,0x69,0x65,0x6c,0x64,0x45,0x78,0x74,0x72,0x61,0x63,0x74,};
u8 glsl_main_keys_key_array_88[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_91[] = {0x66,0x6c,0x6f,0x61,0x74,};
u8 glsl_main_keys_key_array_92[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,0x53,0x68,0x61,0x64,0x6f,0x77,};
u8 glsl_main_keys_key_array_93[] = {0x74,0x72,0x75,0x6e,0x63,};
u8 glsl_main_keys_key_array_94[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_95[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_97[] = {0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_101[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x41,0x74,0x74,0x72,0x69,0x62,0x73,};
u8 glsl_main_keys_key_array_105[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x41,0x6e,0x64,};
u8 glsl_main_keys_key_array_108[] = {0x67,0x6c,0x5f,0x53,0x61,0x6d,0x70,0x6c,0x65,0x4d,0x61,0x73,0x6b,};
u8 glsl_main_keys_key_array_110[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_111[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x47,0x61,0x74,0x68,0x65,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_114[] = {0x65,0x78,0x70,0x32,};
u8 glsl_main_keys_key_array_115[] = {0x6d,0x61,0x74,0x72,0x69,0x78,0x43,0x6f,0x6d,0x70,0x4d,0x75,0x6c,0x74,};
u8 glsl_main_keys_key_array_118[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_119[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x45,0x78,0x63,0x68,0x61,0x6e,0x67,0x65,};
u8 glsl_main_keys_key_array_126[] = {0x62,0x69,0x74,0x66,0x69,0x65,0x6c,0x64,0x52,0x65,0x76,0x65,0x72,0x73,0x65,};
u8 glsl_main_keys_key_array_138[] = {0x64,0x6d,0x61,0x74,0x33,0x78,0x32,};
u8 glsl_main_keys_key_array_139[] = {0x64,0x6d,0x61,0x74,0x33,0x78,0x33,};
u8 glsl_main_keys_key_array_140[] = {0x64,0x6d,0x61,0x74,0x33,0x78,0x34,};
u8 glsl_main_keys_key_array_142[] = {0x67,0x6c,0x5f,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,};
u8 glsl_main_keys_key_array_144[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x33,0x44,};
u8 glsl_main_keys_key_array_145[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x50,0x72,0x6f,0x6a,0x47,0x72,0x61,0x64,};
u8 glsl_main_keys_key_array_147[] = {0x70,0x61,0x63,0x6b,0x48,0x61,0x6c,0x66,0x32,0x78,0x31,0x36,};
u8 glsl_main_keys_key_array_148[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,};
u8 glsl_main_keys_key_array_155[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_160[] = {0x61,0x73,0x69,0x6e,0x68,};
u8 glsl_main_keys_key_array_173[] = {0x62,0x72,0x65,0x61,0x6b,};
u8 glsl_main_keys_key_array_177[] = {0x73,0x69,0x6e,};
u8 glsl_main_keys_key_array_178[] = {0x69,0x6e,0x74,0x65,0x72,0x70,0x6f,0x6c,0x61,0x74,0x65,0x41,0x74,0x53,0x61,0x6d,0x70,0x6c,0x65,};
u8 glsl_main_keys_key_array_179[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_183[] = {0x62,0x61,0x72,0x72,0x69,0x65,0x72,};
u8 glsl_main_keys_key_array_188[] = {0x66,0x6c,0x61,0x74,};
u8 glsl_main_keys_key_array_197[] = {0x67,0x6c,0x5f,0x4c,0x69,0x67,0x68,0x74,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,0x73,};
u8 glsl_main_keys_key_array_199[] = {0x75,0x6e,0x70,0x61,0x63,0x6b,0x53,0x6e,0x6f,0x72,0x6d,0x32,0x78,0x31,0x36,};
u8 glsl_main_keys_key_array_201[] = {0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,};
u8 glsl_main_keys_key_array_202[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x45,0x76,0x61,0x6c,0x75,0x61,0x74,0x69,0x6f,0x6e,0x4f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_206[] = {0x67,0x6c,0x5f,0x50,0x65,0x72,0x56,0x65,0x72,0x74,0x65,0x78,};
u8 glsl_main_keys_key_array_207[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x61,0x72,0x79,0x69,0x6e,0x67,0x56,0x65,0x63,0x74,0x6f,0x72,0x73,};
u8 glsl_main_keys_key_array_208[] = {0x75,0x61,0x64,0x64,0x43,0x61,0x72,0x72,0x79,};
u8 glsl_main_keys_key_array_209[] = {0x67,0x6c,0x5f,0x50,0x61,0x74,0x63,0x68,0x56,0x65,0x72,0x74,0x69,0x63,0x65,0x73,0x49,0x6e,};
u8 glsl_main_keys_key_array_211[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x47,0x72,0x61,0x64,};
u8 glsl_main_keys_key_array_217[] = {0x6e,0x6f,0x69,0x73,0x65,0x31,};
u8 glsl_main_keys_key_array_220[] = {0x6e,0x6f,0x69,0x73,0x65,0x34,};
u8 glsl_main_keys_key_array_222[] = {0x42,0x61,0x73,0x69,0x63,0x73,};
u8 glsl_main_keys_key_array_224[] = {0x72,0x6f,0x75,0x6e,0x64,};
u8 glsl_main_keys_key_array_230[] = {0x6e,0x6f,0x69,0x73,0x65,0x32,};
u8 glsl_main_keys_key_array_231[] = {0x6e,0x6f,0x69,0x73,0x65,0x33,};
u8 glsl_main_keys_key_array_239[] = {0x69,0x66,};
u8 glsl_main_keys_key_array_240[] = {0x75,0x6e,0x70,0x61,0x63,0x6b,0x53,0x6e,0x6f,0x72,0x6d,0x34,0x78,0x38,};
u8 glsl_main_keys_key_array_241[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,};
u8 glsl_main_keys_key_array_242[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_243[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x70,0x75,0x74,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_249[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x70,0x75,0x74,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_251[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x4f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_252[] = {0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,};
u8 glsl_main_keys_key_array_257[] = {0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,};
u8 glsl_main_keys_key_array_261[] = {0x67,0x6c,0x5f,0x54,0x65,0x73,0x73,0x4c,0x65,0x76,0x65,0x6c,0x4f,0x75,0x74,0x65,0x72,};
u8 glsl_main_keys_key_array_265[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x4d,0x53,};
u8 glsl_main_keys_key_array_272[] = {0x65,0x6c,0x73,0x65,};
u8 glsl_main_keys_key_array_274[] = {0x69,0x73,0x6e,0x61,0x6e,};
u8 glsl_main_keys_key_array_281[] = {0x73,0x71,0x72,0x74,};
u8 glsl_main_keys_key_array_282[] = {0x72,0x65,0x66,0x6c,0x65,0x63,0x74,};
u8 glsl_main_keys_key_array_287[] = {0x6d,0x69,0x78,};
u8 glsl_main_keys_key_array_289[] = {0x66,0x6c,0x6f,0x6f,0x72,};
u8 glsl_main_keys_key_array_291[] = {0x73,0x69,0x6e,0x68,};
u8 glsl_main_keys_key_array_294[] = {0x72,0x61,0x64,0x69,0x61,0x6e,0x73,};
u8 glsl_main_keys_key_array_299[] = {0x72,0x65,0x74,0x75,0x72,0x6e,};
u8 glsl_main_keys_key_array_304[] = {0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x65,0x70,0x74,0x68,};
u8 glsl_main_keys_key_array_305[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x70,0x75,0x74,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_306[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,};
u8 glsl_main_keys_key_array_308[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x41,0x64,0x64,};
u8 glsl_main_keys_key_array_310[] = {0x6c,0x6f,0x67,};
u8 glsl_main_keys_key_array_313[] = {0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,};
u8 glsl_main_keys_key_array_314[] = {0x67,0x6c,0x5f,0x4c,0x69,0x67,0x68,0x74,0x53,0x6f,0x75,0x72,0x63,0x65,};
u8 glsl_main_keys_key_array_315[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6c,0x69,0x70,0x44,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x73,};
u8 glsl_main_keys_key_array_322[] = {0x69,0x6e,0x74,0x42,0x69,0x74,0x73,0x54,0x6f,0x46,0x6c,0x6f,0x61,0x74,};
u8 glsl_main_keys_key_array_325[] = {0x67,0x6c,0x5f,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,};
u8 glsl_main_keys_key_array_326[] = {0x73,0x74,0x72,0x75,0x63,0x74,};
u8 glsl_main_keys_key_array_327[] = {0x61,0x73,0x69,0x6e,};
u8 glsl_main_keys_key_array_330[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x4f,0x72,};
u8 glsl_main_keys_key_array_331[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_333[] = {0x76,0x61,0x72,0x79,0x69,0x6e,0x67,};
u8 glsl_main_keys_key_array_338[] = {0x67,0x6c,0x5f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_339[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x45,0x76,0x61,0x6c,0x75,0x61,0x74,0x69,0x6f,0x6e,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_342[] = {0x6d,0x65,0x6d,0x6f,0x72,0x79,0x42,0x61,0x72,0x72,0x69,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,};
u8 glsl_main_keys_key_array_344[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x50,0x72,0x6f,0x6a,0x47,0x72,0x61,0x64,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_345[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,};
u8 glsl_main_keys_key_array_348[] = {0x67,0x6c,0x5f,0x4c,0x6f,0x63,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x6e,0x64,0x65,0x78,};
u8 glsl_main_keys_key_array_350[] = {0x70,0x61,0x63,0x6b,0x53,0x6e,0x6f,0x72,0x6d,0x32,0x78,0x31,0x36,};
u8 glsl_main_keys_key_array_351[] = {0x75,0x6e,0x70,0x61,0x63,0x6b,0x55,0x6e,0x6f,0x72,0x6d,0x34,0x78,0x38,};
u8 glsl_main_keys_key_array_352[] = {0x62,0x69,0x74,0x66,0x69,0x65,0x6c,0x64,0x49,0x6e,0x73,0x65,0x72,0x74,};
u8 glsl_main_keys_key_array_354[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_355[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x52,0x65,0x63,0x74,0x53,0x68,0x61,0x64,0x6f,0x77,};
u8 glsl_main_keys_key_array_359[] = {0x69,0x6e,};
u8 glsl_main_keys_key_array_360[] = {0x69,0x6d,0x75,0x6c,0x45,0x78,0x74,0x65,0x6e,0x64,0x65,0x64,};
u8 glsl_main_keys_key_array_362[] = {0x69,0x73,0x69,0x6e,0x66,};
u8 glsl_main_keys_key_array_363[] = {0x63,0x65,0x6e,0x74,0x72,0x6f,0x69,0x64,};
u8 glsl_main_keys_key_array_364[] = {0x69,0x6e,0x74,0x65,0x72,0x70,0x6f,0x6c,0x61,0x74,0x65,0x41,0x74,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_365[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x4f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_369[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,};
u8 glsl_main_keys_key_array_376[] = {0x67,0x6c,0x5f,0x69,0x6e,};
u8 glsl_main_keys_key_array_377[] = {0x6d,0x69,0x6e,};
u8 glsl_main_keys_key_array_380[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x4d,0x53,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_385[] = {0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,};
u8 glsl_main_keys_key_array_389[] = {0x6d,0x61,0x74,0x33,0x78,0x32,};
u8 glsl_main_keys_key_array_390[] = {0x6d,0x61,0x74,0x33,0x78,0x33,};
u8 glsl_main_keys_key_array_391[] = {0x6d,0x61,0x74,0x33,0x78,0x34,};
u8 glsl_main_keys_key_array_394[] = {0x63,0x65,0x69,0x6c,};
u8 glsl_main_keys_key_array_395[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_397[] = {0x73,0x74,0x65,0x70,};
u8 glsl_main_keys_key_array_399[] = {0x74,0x61,0x6e,0x68,};
u8 glsl_main_keys_key_array_405[] = {0x69,0x6e,0x76,0x61,0x72,0x69,0x61,0x6e,0x74,};
u8 glsl_main_keys_key_array_415[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x33,0x44,};
u8 glsl_main_keys_key_array_417[] = {0x76,0x65,0x63,0x34,};
u8 glsl_main_keys_key_array_418[] = {0x45,0x6e,0x64,0x50,0x72,0x69,0x6d,0x69,0x74,0x69,0x76,0x65,};
u8 glsl_main_keys_key_array_419[] = {0x76,0x65,0x63,0x32,};
u8 glsl_main_keys_key_array_420[] = {0x76,0x65,0x63,0x33,};
u8 glsl_main_keys_key_array_421[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x41,0x6e,0x64,};
u8 glsl_main_keys_key_array_423[] = {0x67,0x6c,0x5f,0x42,0x61,0x63,0x6b,0x53,0x65,0x63,0x6f,0x6e,0x64,0x61,0x72,0x79,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_428[] = {0x70,0x6f,0x77,};
u8 glsl_main_keys_key_array_431[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x58,0x6f,0x72,};
u8 glsl_main_keys_key_array_440[] = {0x67,0x6c,0x5f,0x46,0x72,0x6f,0x6e,0x74,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,};
u8 glsl_main_keys_key_array_445[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_447[] = {0x62,0x76,0x65,0x63,0x34,};
u8 glsl_main_keys_key_array_449[] = {0x62,0x76,0x65,0x63,0x32,};
u8 glsl_main_keys_key_array_450[] = {0x62,0x76,0x65,0x63,0x33,};
u8 glsl_main_keys_key_array_451[] = {0x66,0x69,0x6e,0x64,0x4c,0x53,0x42,};
u8 glsl_main_keys_key_array_457[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x56,0x65,0x63,0x74,0x6f,0x72,0x73,};
u8 glsl_main_keys_key_array_460[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x58,0x6f,0x72,};
u8 glsl_main_keys_key_array_464[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x45,0x76,0x61,0x6c,0x75,0x61,0x74,0x69,0x6f,0x6e,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_465[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_467[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,};
u8 glsl_main_keys_key_array_475[] = {0x68,0x69,0x67,0x68,0x70,};
u8 glsl_main_keys_key_array_477[] = {0x67,0x6c,0x5f,0x43,0x6c,0x69,0x70,0x44,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,};
u8 glsl_main_keys_key_array_478[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x4f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_483[] = {0x77,0x68,0x69,0x6c,0x65,};
u8 glsl_main_keys_key_array_494[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_497[] = {0x6d,0x61,0x74,0x32,};
u8 glsl_main_keys_key_array_498[] = {0x6d,0x61,0x74,0x33,};
u8 glsl_main_keys_key_array_499[] = {0x6e,0x6f,0x74,0x45,0x71,0x75,0x61,0x6c,};
u8 glsl_main_keys_key_array_504[] = {0x67,0x6c,0x5f,0x50,0x6f,0x69,0x6e,0x74,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_505[] = {0x67,0x6c,0x5f,0x53,0x61,0x6d,0x70,0x6c,0x65,0x4d,0x61,0x73,0x6b,0x49,0x6e,};
u8 glsl_main_keys_key_array_507[] = {0x6d,0x61,0x74,0x34,};
u8 glsl_main_keys_key_array_508[] = {0x69,0x76,0x65,0x63,0x34,};
u8 glsl_main_keys_key_array_510[] = {0x69,0x76,0x65,0x63,0x32,};
u8 glsl_main_keys_key_array_511[] = {0x69,0x76,0x65,0x63,0x33,};
u8 glsl_main_keys_key_array_515[] = {0x67,0x6c,0x5f,0x4e,0x75,0x6d,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x73,};
u8 glsl_main_keys_key_array_521[] = {0x67,0x6c,0x5f,0x42,0x61,0x63,0x6b,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,};
u8 glsl_main_keys_key_array_527[] = {0x67,0x6c,0x5f,0x4c,0x6f,0x63,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,};
u8 glsl_main_keys_key_array_530[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,0x53,0x68,0x61,0x64,0x6f,0x77,};
u8 glsl_main_keys_key_array_547[] = {0x61,0x74,0x61,0x6e,};
u8 glsl_main_keys_key_array_553[] = {0x6d,0x65,0x6d,0x6f,0x72,0x79,0x42,0x61,0x72,0x72,0x69,0x65,0x72,0x49,0x6d,0x61,0x67,0x65,};
u8 glsl_main_keys_key_array_555[] = {0x75,0x73,0x75,0x62,0x42,0x6f,0x72,0x72,0x6f,0x77,};
u8 glsl_main_keys_key_array_557[] = {0x67,0x6c,0x5f,0x50,0x72,0x69,0x6d,0x69,0x74,0x69,0x76,0x65,0x49,0x44,0x49,0x6e,};
u8 glsl_main_keys_key_array_564[] = {0x67,0x6c,0x5f,0x42,0x61,0x63,0x6b,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_567[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x61,0x72,0x79,0x69,0x6e,0x67,0x46,0x6c,0x6f,0x61,0x74,0x73,};
u8 glsl_main_keys_key_array_569[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x62,0x69,0x6e,0x65,0x64,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_572[] = {0x67,0x6c,0x5f,0x46,0x72,0x6f,0x6e,0x74,0x53,0x65,0x63,0x6f,0x6e,0x64,0x61,0x72,0x79,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_577[] = {0x76,0x6f,0x69,0x64,};
u8 glsl_main_keys_key_array_581[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x4f,0x75,0x74,0x70,0x75,0x74,0x56,0x65,0x72,0x74,0x69,0x63,0x65,0x73,};
u8 glsl_main_keys_key_array_584[] = {0x75,0x6e,0x70,0x61,0x63,0x6b,0x44,0x6f,0x75,0x62,0x6c,0x65,0x32,0x78,0x33,0x32,};
u8 glsl_main_keys_key_array_585[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_594[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x52,0x65,0x63,0x74,};
u8 glsl_main_keys_key_array_597[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x51,0x75,0x65,0x72,0x79,0x4c,0x6f,0x64,};
u8 glsl_main_keys_key_array_598[] = {0x67,0x6c,0x5f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,0x73,};
u8 glsl_main_keys_key_array_602[] = {0x6c,0x65,0x73,0x73,0x54,0x68,0x61,0x6e,};
u8 glsl_main_keys_key_array_607[] = {0x6d,0x61,0x74,0x34,0x78,0x32,};
u8 glsl_main_keys_key_array_608[] = {0x6d,0x61,0x74,0x34,0x78,0x33,};
u8 glsl_main_keys_key_array_609[] = {0x67,0x6c,0x5f,0x46,0x6f,0x67,0x43,0x6f,0x6f,0x72,0x64,};
u8 glsl_main_keys_key_array_610[] = {0x70,0x61,0x74,0x63,0x68,};
u8 glsl_main_keys_key_array_611[] = {0x69,0x6d,0x61,0x67,0x65,0x53,0x74,0x6f,0x72,0x65,};
u8 glsl_main_keys_key_array_613[] = {0x61,0x63,0x6f,0x73,};
u8 glsl_main_keys_key_array_617[] = {0x6d,0x61,0x74,0x34,0x78,0x34,};
u8 glsl_main_keys_key_array_618[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x6d,0x70,0x53,0x77,0x61,0x70,};
u8 glsl_main_keys_key_array_627[] = {0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,};
u8 glsl_main_keys_key_array_629[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_632[] = {0x67,0x6c,0x5f,0x46,0x6f,0x67,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_633[] = {0x75,0x76,0x65,0x63,0x34,};
u8 glsl_main_keys_key_array_635[] = {0x75,0x76,0x65,0x63,0x32,};
u8 glsl_main_keys_key_array_636[] = {0x75,0x76,0x65,0x63,0x33,};
u8 glsl_main_keys_key_array_637[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x33,0x44,};
u8 glsl_main_keys_key_array_638[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x56,0x61,0x72,0x79,0x69,0x6e,0x67,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_641[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,};
u8 glsl_main_keys_key_array_642[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x4c,0x69,0x67,0x68,0x74,0x73,};
u8 glsl_main_keys_key_array_643[] = {0x67,0x6c,0x5f,0x4c,0x69,0x67,0x68,0x74,0x53,0x6f,0x75,0x72,0x63,0x65,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_654[] = {0x67,0x6c,0x5f,0x4f,0x62,0x6a,0x65,0x63,0x74,0x50,0x6c,0x61,0x6e,0x65,0x54,};
u8 glsl_main_keys_key_array_656[] = {0x67,0x6c,0x5f,0x4f,0x62,0x6a,0x65,0x63,0x74,0x50,0x6c,0x61,0x6e,0x65,0x52,};
u8 glsl_main_keys_key_array_657[] = {0x6d,0x61,0x74,0x32,0x78,0x32,};
u8 glsl_main_keys_key_array_658[] = {0x67,0x6c,0x5f,0x4f,0x62,0x6a,0x65,0x63,0x74,0x50,0x6c,0x61,0x6e,0x65,0x53,};
u8 glsl_main_keys_key_array_659[] = {0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x49,0x44,};
u8 glsl_main_keys_key_array_660[] = {0x6d,0x61,0x74,0x32,0x78,0x33,};
u8 glsl_main_keys_key_array_662[] = {0x61,0x63,0x6f,0x73,0x68,};
u8 glsl_main_keys_key_array_663[] = {0x64,0x6f,0x74,};
u8 glsl_main_keys_key_array_667[] = {0x67,0x6c,0x5f,0x4f,0x62,0x6a,0x65,0x63,0x74,0x50,0x6c,0x61,0x6e,0x65,0x51,};
u8 glsl_main_keys_key_array_669[] = {0x6e,0x6f,0x70,0x65,0x72,0x73,0x70,0x65,0x63,0x74,0x69,0x76,0x65,};
u8 glsl_main_keys_key_array_671[] = {0x63,0x6c,0x61,0x6d,0x70,};
u8 glsl_main_keys_key_array_680[] = {0x67,0x6c,0x5f,0x50,0x72,0x69,0x6d,0x69,0x74,0x69,0x76,0x65,0x49,0x44,};
u8 glsl_main_keys_key_array_681[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x4f,0x75,0x74,0x70,0x75,0x74,0x56,0x65,0x63,0x74,0x6f,0x72,0x73,};
u8 glsl_main_keys_key_array_682[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,0x69,0x78,};
u8 glsl_main_keys_key_array_683[] = {0x6d,0x61,0x74,0x32,0x78,0x34,};
u8 glsl_main_keys_key_array_686[] = {0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,};
u8 glsl_main_keys_key_array_695[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,};
u8 glsl_main_keys_key_array_697[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x50,0x61,0x74,0x63,0x68,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_698[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_700[] = {0x73,0x69,0x67,0x6e,};
u8 glsl_main_keys_key_array_704[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_711[] = {0x67,0x6c,0x5f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,};
u8 glsl_main_keys_key_array_712[] = {0x67,0x6c,0x5f,0x54,0x65,0x73,0x73,0x43,0x6f,0x6f,0x72,0x64,};
u8 glsl_main_keys_key_array_724[] = {0x74,0x61,0x6e,};
u8 glsl_main_keys_key_array_725[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x45,0x76,0x61,0x6c,0x75,0x61,0x74,0x69,0x6f,0x6e,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_726[] = {0x75,0x69,0x6e,0x74,0x42,0x69,0x74,0x73,0x54,0x6f,0x46,0x6c,0x6f,0x61,0x74,};
u8 glsl_main_keys_key_array_727[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x70,0x75,0x74,0x65,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x53,0x69,0x7a,0x65,};
u8 glsl_main_keys_key_array_733[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,};
u8 glsl_main_keys_key_array_734[] = {0x6c,0x64,0x65,0x78,0x70,};
u8 glsl_main_keys_key_array_740[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_743[] = {0x70,0x61,0x63,0x6b,0x53,0x6e,0x6f,0x72,0x6d,0x34,0x78,0x38,};
u8 glsl_main_keys_key_array_748[] = {0x70,0x61,0x63,0x6b,0x55,0x6e,0x6f,0x72,0x6d,0x32,0x78,0x31,0x36,};
u8 glsl_main_keys_key_array_751[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x50,0x72,0x6f,0x6a,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_756[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_760[] = {0x66,0x61,0x63,0x65,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,};
u8 glsl_main_keys_key_array_776[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,};
u8 glsl_main_keys_key_array_777[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x49,0x6d,0x61,0x67,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x73,};
u8 glsl_main_keys_key_array_779[] = {0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,};
u8 glsl_main_keys_key_array_780[] = {0x6c,0x61,0x79,0x6f,0x75,0x74,};
u8 glsl_main_keys_key_array_783[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x4d,0x53,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_784[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x51,0x75,0x65,0x72,0x79,0x4c,0x65,0x76,0x65,0x6c,0x73,};
u8 glsl_main_keys_key_array_785[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x62,0x69,0x6e,0x65,0x64,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_787[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x49,0x6e,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_800[] = {0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,};
u8 glsl_main_keys_key_array_801[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x54,0x6f,0x74,0x61,0x6c,0x4f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_803[] = {0x67,0x6c,0x5f,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x45,0x6e,0x76,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_805[] = {0x6d,0x6f,0x64,0x66,};
u8 glsl_main_keys_key_array_809[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x70,0x75,0x74,0x65,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x43,0x6f,0x75,0x6e,0x74,};
u8 glsl_main_keys_key_array_812[] = {0x61,0x6c,0x6c,};
u8 glsl_main_keys_key_array_820[] = {0x64,0x65,0x67,0x72,0x65,0x65,0x73,};
u8 glsl_main_keys_key_array_830[] = {0x64,0x6f,0x75,0x62,0x6c,0x65,};
u8 glsl_main_keys_key_array_831[] = {0x67,0x6c,0x5f,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_832[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,};
u8 glsl_main_keys_key_array_840[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,};
u8 glsl_main_keys_key_array_843[] = {0x66,0x6d,0x61,};
u8 glsl_main_keys_key_array_846[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_849[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x49,0x6e,0x70,0x75,0x74,0x56,0x65,0x63,0x74,0x6f,0x72,0x73,};
u8 glsl_main_keys_key_array_852[] = {0x74,0x72,0x75,0x65,};
u8 glsl_main_keys_key_array_853[] = {0x67,0x72,0x65,0x61,0x74,0x65,0x72,0x54,0x68,0x61,0x6e,};
u8 glsl_main_keys_key_array_857[] = {0x64,0x6f,};
u8 glsl_main_keys_key_array_866[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,};
u8 glsl_main_keys_key_array_870[] = {0x72,0x6f,0x75,0x6e,0x64,0x45,0x76,0x65,0x6e,};
u8 glsl_main_keys_key_array_871[] = {0x66,0x6c,0x6f,0x61,0x74,0x42,0x69,0x74,0x73,0x54,0x6f,0x55,0x69,0x6e,0x74,};
u8 glsl_main_keys_key_array_873[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,};
u8 glsl_main_keys_key_array_874[] = {0x75,0x69,0x6e,0x74,};
u8 glsl_main_keys_key_array_875[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x4d,0x61,0x78,};
u8 glsl_main_keys_key_array_876[] = {0x67,0x6c,0x5f,0x56,0x69,0x65,0x77,0x70,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,};
u8 glsl_main_keys_key_array_884[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,0x69,0x78,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_891[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x50,0x72,0x6f,0x67,0x72,0x61,0x6d,0x54,0x65,0x78,0x65,0x6c,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_896[] = {0x67,0x6c,0x5f,0x53,0x61,0x6d,0x70,0x6c,0x65,0x49,0x44,};
u8 glsl_main_keys_key_array_897[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x70,0x75,0x74,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_898[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x50,0x72,0x6f,0x6a,};
u8 glsl_main_keys_key_array_899[] = {0x67,0x6c,0x5f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_903[] = {0x64,0x46,0x64,0x78,};
u8 glsl_main_keys_key_array_904[] = {0x64,0x46,0x64,0x79,};
u8 glsl_main_keys_key_array_912[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,};
u8 glsl_main_keys_key_array_913[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x4d,0x61,0x78,};
u8 glsl_main_keys_key_array_915[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_916[] = {0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x73,0x71,0x72,0x74,};
u8 glsl_main_keys_key_array_917[] = {0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,};
u8 glsl_main_keys_key_array_922[] = {0x62,0x69,0x74,0x43,0x6f,0x75,0x6e,0x74,};
u8 glsl_main_keys_key_array_923[] = {0x67,0x6c,0x5f,0x53,0x65,0x63,0x6f,0x6e,0x64,0x61,0x72,0x79,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_924[] = {0x66,0x61,0x6c,0x73,0x65,};
u8 glsl_main_keys_key_array_925[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x53,0x68,0x61,0x64,0x6f,0x77,};
u8 glsl_main_keys_key_array_926[] = {0x73,0x6d,0x6f,0x6f,0x74,0x68,};
u8 glsl_main_keys_key_array_929[] = {0x67,0x72,0x6f,0x75,0x70,0x4d,0x65,0x6d,0x6f,0x72,0x79,0x42,0x61,0x72,0x72,0x69,0x65,0x72,};
u8 glsl_main_keys_key_array_933[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x49,0x6e,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_937[] = {0x6c,0x65,0x73,0x73,0x54,0x68,0x65,0x6e,0x45,0x71,0x75,0x61,0x6c,};
u8 glsl_main_keys_key_array_950[] = {0x67,0x72,0x65,0x61,0x74,0x65,0x72,0x54,0x68,0x61,0x6e,0x45,0x71,0x75,0x61,0x6c,};
u8 glsl_main_keys_key_array_960[] = {0x6c,0x6f,0x77,0x70,};
u8 glsl_main_keys_key_array_964[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x47,0x65,0x6e,0x4c,0x65,0x76,0x65,0x6c,};
u8 glsl_main_keys_key_array_965[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x45,0x78,0x63,0x68,0x61,0x6e,0x67,0x65,};
u8 glsl_main_keys_key_array_968[] = {0x69,0x6d,0x61,0x67,0x65,0x4c,0x6f,0x61,0x64,};
u8 glsl_main_keys_key_array_971[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,0x41,0x72,0x72,0x61,0x79,0x53,0x68,0x61,0x64,0x6f,0x77,};
u8 glsl_main_keys_key_array_975[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x43,0x6f,0x6f,0x72,0x64,0x73,};
u8 glsl_main_keys_key_array_982[] = {0x67,0x6c,0x5f,0x44,0x65,0x70,0x74,0x68,0x52,0x61,0x6e,0x67,0x65,};
u8 glsl_main_keys_key_array_983[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x62,0x69,0x6e,0x65,0x64,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,};
u8 glsl_main_keys_key_array_986[] = {0x6e,0x6f,0x74,};
u8 glsl_main_keys_key_array_988[] = {0x67,0x6c,0x5f,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x53,0x63,0x61,0x6c,0x65,};
u8 glsl_main_keys_key_array_990[] = {0x66,0x72,0x61,0x63,0x74,};
u8 glsl_main_keys_key_array_991[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x6d,0x70,0x53,0x77,0x61,0x70,};
u8 glsl_main_keys_key_array_993[] = {0x67,0x6c,0x5f,0x4e,0x75,0x6d,0x53,0x61,0x6d,0x70,0x6c,0x65,0x73,};
u8 glsl_main_keys_key_array_1001[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,};
u8 glsl_main_keys_key_array_1006[] = {0x66,0x69,0x6e,0x64,0x4d,0x53,0x42,};
u8 glsl_main_keys_key_array_1007[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x56,0x65,0x63,0x74,0x6f,0x72,0x73,};
u8 glsl_main_keys_key_array_1008[] = {0x67,0x6c,0x5f,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,};
u8 glsl_main_keys_key_array_1015[] = {0x6d,0x6f,0x64,};
u8 glsl_main_keys_key_array_1016[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x4f,0x72,};
u8 glsl_main_keys_key_array_1017[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x62,0x69,0x6e,0x65,0x64,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_1020[] = {0x69,0x6e,0x76,0x65,0x72,0x73,0x65,};
u8 glsl_main_keys_key_array_1026[] = {0x62,0x6f,0x6f,0x6c,};
u8 glsl_main_keys_key_array_1027[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x44,0x65,0x63,0x72,0x65,0x6d,0x65,0x6e,0x74,};
u8 glsl_main_keys_key_array_1028[] = {0x69,0x6e,0x74,0x65,0x72,0x70,0x6f,0x6c,0x61,0x74,0x65,0x41,0x74,0x43,0x65,0x6e,0x74,0x72,0x6f,0x69,0x64,};
u8 glsl_main_keys_key_array_1033[] = {0x67,0x6c,0x5f,0x44,0x65,0x70,0x74,0x68,0x52,0x61,0x6e,0x67,0x65,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_1034[] = {0x67,0x6c,0x5f,0x6f,0x75,0x74,};
u8 glsl_main_keys_key_array_1035[] = {0x67,0x6c,0x5f,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x4d,0x61,0x74,0x72,0x69,0x78,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_1036[] = {0x69,0x6d,0x61,0x67,0x65,0x41,0x74,0x6f,0x6d,0x69,0x63,0x4d,0x69,0x6e,};
u8 glsl_main_keys_key_array_1039[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x50,0x72,0x6f,0x6a,0x4c,0x6f,0x64,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_1045[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x52,0x65,0x63,0x74,};
u8 glsl_main_keys_key_array_1048[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_1052[] = {0x66,0x77,0x69,0x64,0x74,0x68,};
u8 glsl_main_keys_key_array_1055[] = {0x67,0x6c,0x5f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_1058[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_1059[] = {0x6f,0x75,0x74,0x65,0x72,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,};
u8 glsl_main_keys_key_array_1060[] = {0x67,0x6c,0x5f,0x46,0x72,0x6f,0x6e,0x74,0x4c,0x69,0x67,0x68,0x74,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,};
u8 glsl_main_keys_key_array_1064[] = {0x67,0x6c,0x5f,0x50,0x6f,0x69,0x6e,0x74,};
u8 glsl_main_keys_key_array_1065[] = {0x67,0x6c,0x5f,0x46,0x72,0x6f,0x6e,0x74,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_1066[] = {0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,};
u8 glsl_main_keys_key_array_1076[] = {0x66,0x6f,0x72,};
u8 glsl_main_keys_key_array_1077[] = {0x67,0x6c,0x5f,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,0x54,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_1078[] = {0x6d,0x65,0x6d,0x6f,0x72,0x79,0x42,0x61,0x72,0x72,0x69,0x65,0x72,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,};
u8 glsl_main_keys_key_array_1094[] = {0x67,0x6c,0x5f,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,};
u8 glsl_main_keys_key_array_1098[] = {0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,};
u8 glsl_main_keys_key_array_1099[] = {0x67,0x6c,0x5f,0x43,0x6c,0x69,0x70,0x50,0x6c,0x61,0x6e,0x65,};
u8 glsl_main_keys_key_array_1100[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,};
u8 glsl_main_keys_key_array_1102[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,0x41,0x72,0x72,0x61,0x79,0x53,0x68,0x61,0x64,0x6f,0x77,};
u8 glsl_main_keys_key_array_1103[] = {0x75,0x6d,0x75,0x6c,0x45,0x78,0x74,0x65,0x6e,0x64,0x65,0x64,};
u8 glsl_main_keys_key_array_1107[] = {0x75,0x6e,0x70,0x61,0x63,0x6b,0x55,0x6e,0x6f,0x72,0x6d,0x32,0x78,0x31,0x36,};
u8 glsl_main_keys_key_array_1109[] = {0x75,0x6e,0x70,0x61,0x63,0x6b,0x48,0x61,0x6c,0x66,0x32,0x78,0x31,0x36,};
u8 glsl_main_keys_key_array_1111[] = {0x63,0x6f,0x6e,0x73,0x74,};
u8 glsl_main_keys_key_array_1112[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x49,0x6e,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_1116[] = {0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,};
u8 glsl_main_keys_key_array_1117[] = {0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_1125[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_1127[] = {0x61,0x6e,0x79,};
u8 glsl_main_keys_key_array_1131[] = {0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,};
u8 glsl_main_keys_key_array_1133[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,};
u8 glsl_main_keys_key_array_1136[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x36,};
u8 glsl_main_keys_key_array_1137[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,};
u8 glsl_main_keys_key_array_1138[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x37,};
u8 glsl_main_keys_key_array_1141[] = {0x6d,0x65,0x6d,0x6f,0x72,0x79,0x42,0x61,0x72,0x72,0x69,0x65,0x72,0x53,0x68,0x61,0x72,0x65,0x64,};
u8 glsl_main_keys_key_array_1142[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x45,0x76,0x61,0x6c,0x75,0x61,0x74,0x69,0x6f,0x6e,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,};
u8 glsl_main_keys_key_array_1148[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x4d,0x53,};
u8 glsl_main_keys_key_array_1156[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x32,};
u8 glsl_main_keys_key_array_1157[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x33,};
u8 glsl_main_keys_key_array_1158[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x34,};
u8 glsl_main_keys_key_array_1159[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x35,};
u8 glsl_main_keys_key_array_1162[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,};
u8 glsl_main_keys_key_array_1163[] = {0x67,0x6c,0x5f,0x4d,0x75,0x6c,0x74,0x69,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x31,};
u8 glsl_main_keys_key_array_1165[] = {0x69,0x6d,0x61,0x67,0x65,0x53,0x69,0x7a,0x65,};
u8 glsl_main_keys_key_array_1168[] = {0x73,0x75,0x62,0x72,0x6f,0x75,0x74,0x69,0x6e,0x65,};
u8 glsl_main_keys_key_array_1170[] = {0x69,0x6e,0x74,};
u8 glsl_main_keys_key_array_1171[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,};
u8 glsl_main_keys_key_array_1173[] = {0x67,0x6c,0x5f,0x42,0x61,0x63,0x6b,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,};
u8 glsl_main_keys_key_array_1175[] = {0x67,0x6c,0x5f,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x4d,0x61,0x74,0x72,0x69,0x78,};
u8 glsl_main_keys_key_array_1180[] = {0x67,0x6c,0x5f,0x54,0x65,0x73,0x73,0x4c,0x65,0x76,0x65,0x6c,0x49,0x6e,0x6e,0x65,0x72,};
u8 glsl_main_keys_key_array_1187[] = {0x61,0x62,0x73,};
u8 glsl_main_keys_key_array_1188[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x54,0x65,0x73,0x73,0x45,0x76,0x61,0x6c,0x75,0x61,0x74,0x69,0x6f,0x6e,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_1190[] = {0x73,0x77,0x69,0x74,0x63,0x68,};
u8 glsl_main_keys_key_array_1193[] = {0x45,0x6d,0x69,0x74,0x56,0x65,0x72,0x74,0x65,0x78,};
u8 glsl_main_keys_key_array_1196[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x49,0x6e,0x63,0x72,0x65,0x6d,0x65,0x6e,0x74,};
u8 glsl_main_keys_key_array_1200[] = {0x67,0x6c,0x5f,0x50,0x6f,0x69,0x6e,0x74,0x53,0x69,0x7a,0x65,};
u8 glsl_main_keys_key_array_1201[] = {0x67,0x6c,0x5f,0x50,0x6f,0x69,0x6e,0x74,0x43,0x6f,0x6f,0x72,0x64,};
u8 glsl_main_keys_key_array_1206[] = {0x63,0x72,0x6f,0x73,0x73,};
u8 glsl_main_keys_key_array_1207[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x70,0x75,0x74,0x65,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,};
u8 glsl_main_keys_key_array_1214[] = {0x6c,0x6f,0x67,0x32,};
u8 glsl_main_keys_key_array_1215[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x43,0x6f,0x6d,0x62,0x69,0x6e,0x65,0x64,0x49,0x6d,0x61,0x67,0x65,0x55,0x6e,0x69,0x74,0x73,0x41,0x6e,0x64,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x4f,0x75,0x74,0x70,0x75,0x74,0x73,};
u8 glsl_main_keys_key_array_1217[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x61,0x72,0x79,0x69,0x6e,0x67,0x56,0x65,0x63,0x74,0x6f,0x72,};
u8 glsl_main_keys_key_array_1231[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x73,};
u8 glsl_main_keys_key_array_1232[] = {0x67,0x6c,0x5f,0x45,0x79,0x65,0x50,0x6c,0x61,0x6e,0x65,0x54,};
u8 glsl_main_keys_key_array_1234[] = {0x67,0x6c,0x5f,0x45,0x79,0x65,0x50,0x6c,0x61,0x6e,0x65,0x52,};
u8 glsl_main_keys_key_array_1235[] = {0x67,0x6c,0x5f,0x45,0x79,0x65,0x50,0x6c,0x61,0x6e,0x65,0x53,};
u8 glsl_main_keys_key_array_1237[] = {0x67,0x6c,0x5f,0x46,0x72,0x6f,0x6e,0x74,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,};
u8 glsl_main_keys_key_array_1238[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x44,0x72,0x61,0x77,0x42,0x75,0x66,0x66,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_1240[] = {0x64,0x6d,0x61,0x74,0x34,0x78,0x32,};
u8 glsl_main_keys_key_array_1241[] = {0x64,0x6d,0x61,0x74,0x34,0x78,0x33,};
u8 glsl_main_keys_key_array_1245[] = {0x72,0x65,0x66,0x72,0x61,0x63,0x74,};
u8 glsl_main_keys_key_array_1246[] = {0x67,0x6c,0x5f,0x42,0x61,0x63,0x6b,0x4c,0x69,0x67,0x68,0x74,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,};
u8 glsl_main_keys_key_array_1247[] = {0x67,0x6c,0x5f,0x45,0x79,0x65,0x50,0x6c,0x61,0x6e,0x65,0x51,};
u8 glsl_main_keys_key_array_1250[] = {0x64,0x6d,0x61,0x74,0x34,0x78,0x34,};
u8 glsl_main_keys_key_array_1252[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x52,0x65,0x63,0x74,};
u8 glsl_main_keys_key_array_1254[] = {0x66,0x72,0x65,0x78,0x70,};
u8 glsl_main_keys_key_array_1258[] = {0x64,0x6d,0x61,0x74,0x32,0x78,0x32,};
u8 glsl_main_keys_key_array_1259[] = {0x64,0x6d,0x61,0x74,0x32,0x78,0x33,};
u8 glsl_main_keys_key_array_1261[] = {0x63,0x6f,0x6e,0x74,0x69,0x6e,0x75,0x65,};
u8 glsl_main_keys_key_array_1263[] = {0x70,0x61,0x63,0x6b,0x44,0x6f,0x75,0x62,0x6c,0x65,0x32,0x78,0x33,0x32,};
u8 glsl_main_keys_key_array_1265[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,};
u8 glsl_main_keys_key_array_1266[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x4d,0x53,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_1269[] = {0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x44,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_1271[] = {0x63,0x6f,0x73,0x68,};
u8 glsl_main_keys_key_array_1272[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x65,0x72,0x74,0x65,0x78,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x73,};
u8 glsl_main_keys_key_array_1282[] = {0x6d,0x65,0x6d,0x6f,0x72,0x79,0x42,0x61,0x72,0x72,0x69,0x65,0x72,};
u8 glsl_main_keys_key_array_1283[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x50,0x61,0x74,0x63,0x68,0x56,0x65,0x72,0x74,0x69,0x63,0x65,0x73,};
u8 glsl_main_keys_key_array_1284[] = {0x64,0x6d,0x61,0x74,0x32,0x78,0x34,};
u8 glsl_main_keys_key_array_1288[] = {0x67,0x6c,0x5f,0x53,0x61,0x6d,0x70,0x6c,0x65,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,};
u8 glsl_main_keys_key_array_1289[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x56,0x61,0x72,0x79,0x69,0x6e,0x67,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_1293[] = {0x63,0x6f,0x73,};
u8 glsl_main_keys_key_array_1297[] = {0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,};
u8 glsl_main_keys_key_array_1300[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x47,0x61,0x74,0x68,0x65,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x73,};
u8 glsl_main_keys_key_array_1303[] = {0x64,0x69,0x73,0x63,0x61,0x72,0x64,};
u8 glsl_main_keys_key_array_1312[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x4d,0x53,};
u8 glsl_main_keys_key_array_1313[] = {0x64,0x65,0x74,0x65,0x72,0x6d,0x69,0x6e,0x61,0x6e,0x74,};
u8 glsl_main_keys_key_array_1314[] = {0x67,0x6c,0x5f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,};
u8 glsl_main_keys_key_array_1315[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x54,0x6f,0x74,0x61,0x6c,0x4f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73,};
u8 glsl_main_keys_key_array_1318[] = {0x65,0x78,0x70,};
u8 glsl_main_keys_key_array_1326[] = {0x67,0x6c,0x5f,0x43,0x6f,0x6c,0x6f,0x72,};
u8 glsl_main_keys_key_array_1327[] = {0x64,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,};
u8 glsl_main_keys_key_array_1328[] = {0x6c,0x65,0x6e,0x67,0x74,0x68,};
u8 glsl_main_keys_key_array_1334[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,};
u8 glsl_main_keys_key_array_1335[] = {0x67,0x6c,0x5f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,};
u8 glsl_main_keys_key_array_1336[] = {0x67,0x6c,0x5f,0x46,0x72,0x6f,0x6e,0x74,0x46,0x61,0x63,0x69,0x6e,0x67,};
u8 glsl_main_keys_key_array_1338[] = {0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x53,0x68,0x61,0x64,0x6f,0x77,};
u8 glsl_main_keys_key_array_1339[] = {0x66,0x6c,0x6f,0x61,0x74,0x42,0x69,0x74,0x73,0x54,0x6f,0x49,0x6e,0x74,};
u8 glsl_main_keys_key_array_1342[] = {0x69,0x6e,0x6f,0x75,0x74,};
u8 glsl_main_keys_key_array_1344[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,0x41,0x72,0x72,0x61,0x79,};
u8 glsl_main_keys_key_array_1348[] = {0x67,0x6c,0x5f,0x4d,0x61,0x78,0x41,0x74,0x6f,0x6d,0x69,0x63,0x43,0x6f,0x75,0x6e,0x74,0x65,0x72,0x42,0x75,0x66,0x66,0x65,0x72,0x53,0x69,0x7a,0x65,};
u8 glsl_main_keys_key_array_1350[] = {0x61,0x74,0x6f,0x6d,0x69,0x63,0x41,0x64,0x64,};
u8 glsl_main_keys_key_array_1351[] = {0x64,0x65,0x66,0x61,0x75,0x6c,0x74,};
u8 glsl_main_keys_key_array_1353[] = {0x69,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,0x65,};
u8 glsl_main_keys_key_array_1354[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x47,0x72,0x61,0x64,0x4f,0x66,0x66,0x73,0x65,0x74,};
u8 glsl_main_keys_key_array_1355[] = {0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x47,0x61,0x74,0x68,0x65,0x72,};
String_Const_u8 glsl_main_keys_key_array[1357] = {
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_5, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_11, 16},
{glsl_main_keys_key_array_12, 15},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_18, 5},
{0, 0},
{glsl_main_keys_key_array_20, 28},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_29, 35},
{0, 0},
{glsl_main_keys_key_array_31, 24},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_35, 10},
{glsl_main_keys_key_array_36, 31},
{0, 0},
{glsl_main_keys_key_array_38, 3},
{glsl_main_keys_key_array_39, 16},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_43, 18},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_47, 16},
{glsl_main_keys_key_array_48, 12},
{0, 0},
{glsl_main_keys_key_array_50, 5},
{glsl_main_keys_key_array_51, 9},
{glsl_main_keys_key_array_52, 5},
{glsl_main_keys_key_array_53, 5},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_56, 5},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_63, 3},
{0, 0},
{glsl_main_keys_key_array_65, 5},
{glsl_main_keys_key_array_66, 5},
{0, 0},
{glsl_main_keys_key_array_68, 14},
{glsl_main_keys_key_array_69, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_75, 5},
{0, 0},
{glsl_main_keys_key_array_77, 4},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_85, 10},
{glsl_main_keys_key_array_86, 15},
{0, 0},
{glsl_main_keys_key_array_88, 16},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_91, 5},
{glsl_main_keys_key_array_92, 17},
{glsl_main_keys_key_array_93, 5},
{glsl_main_keys_key_array_94, 31},
{glsl_main_keys_key_array_95, 13},
{0, 0},
{glsl_main_keys_key_array_97, 12},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_101, 19},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_105, 9},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_108, 13},
{0, 0},
{glsl_main_keys_key_array_110, 18},
{glsl_main_keys_key_array_111, 19},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_114, 4},
{glsl_main_keys_key_array_115, 14},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_118, 44},
{glsl_main_keys_key_array_119, 14},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_126, 15},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_138, 7},
{glsl_main_keys_key_array_139, 7},
{glsl_main_keys_key_array_140, 7},
{0, 0},
{glsl_main_keys_key_array_142, 23},
{0, 0},
{glsl_main_keys_key_array_144, 10},
{glsl_main_keys_key_array_145, 15},
{0, 0},
{glsl_main_keys_key_array_147, 12},
{glsl_main_keys_key_array_148, 6},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_155, 14},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_160, 5},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_173, 5},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_177, 3},
{glsl_main_keys_key_array_178, 19},
{glsl_main_keys_key_array_179, 23},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_183, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_188, 4},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_197, 16},
{0, 0},
{glsl_main_keys_key_array_199, 15},
{0, 0},
{glsl_main_keys_key_array_201, 7},
{glsl_main_keys_key_array_202, 36},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_206, 12},
{glsl_main_keys_key_array_207, 20},
{glsl_main_keys_key_array_208, 9},
{glsl_main_keys_key_array_209, 18},
{0, 0},
{glsl_main_keys_key_array_211, 11},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_217, 6},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_220, 6},
{0, 0},
{glsl_main_keys_key_array_222, 6},
{0, 0},
{glsl_main_keys_key_array_224, 5},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_230, 6},
{glsl_main_keys_key_array_231, 6},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_239, 2},
{glsl_main_keys_key_array_240, 14},
{glsl_main_keys_key_array_241, 14},
{glsl_main_keys_key_array_242, 31},
{glsl_main_keys_key_array_243, 30},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_249, 27},
{0, 0},
{glsl_main_keys_key_array_251, 33},
{glsl_main_keys_key_array_252, 11},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_257, 12},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_261, 17},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_265, 12},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_272, 4},
{0, 0},
{glsl_main_keys_key_array_274, 5},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_281, 4},
{glsl_main_keys_key_array_282, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_287, 3},
{0, 0},
{glsl_main_keys_key_array_289, 5},
{0, 0},
{glsl_main_keys_key_array_291, 4},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_294, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_299, 6},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_304, 12},
{glsl_main_keys_key_array_305, 30},
{glsl_main_keys_key_array_306, 9},
{0, 0},
{glsl_main_keys_key_array_308, 14},
{0, 0},
{glsl_main_keys_key_array_310, 3},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_313, 9},
{glsl_main_keys_key_array_314, 14},
{glsl_main_keys_key_array_315, 19},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_322, 14},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_325, 11},
{glsl_main_keys_key_array_326, 6},
{glsl_main_keys_key_array_327, 4},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_330, 13},
{glsl_main_keys_key_array_331, 15},
{0, 0},
{glsl_main_keys_key_array_333, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_338, 35},
{glsl_main_keys_key_array_339, 40},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_342, 19},
{0, 0},
{glsl_main_keys_key_array_344, 21},
{glsl_main_keys_key_array_345, 27},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_348, 23},
{0, 0},
{glsl_main_keys_key_array_350, 13},
{glsl_main_keys_key_array_351, 14},
{glsl_main_keys_key_array_352, 14},
{0, 0},
{glsl_main_keys_key_array_354, 15},
{glsl_main_keys_key_array_355, 19},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_359, 2},
{glsl_main_keys_key_array_360, 12},
{0, 0},
{glsl_main_keys_key_array_362, 5},
{glsl_main_keys_key_array_363, 8},
{glsl_main_keys_key_array_364, 19},
{glsl_main_keys_key_array_365, 28},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_369, 35},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_376, 5},
{glsl_main_keys_key_array_377, 3},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_380, 17},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_385, 9},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_389, 6},
{glsl_main_keys_key_array_390, 6},
{glsl_main_keys_key_array_391, 6},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_394, 4},
{glsl_main_keys_key_array_395, 31},
{0, 0},
{glsl_main_keys_key_array_397, 4},
{0, 0},
{glsl_main_keys_key_array_399, 4},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_405, 9},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_415, 10},
{0, 0},
{glsl_main_keys_key_array_417, 4},
{glsl_main_keys_key_array_418, 12},
{glsl_main_keys_key_array_419, 4},
{glsl_main_keys_key_array_420, 4},
{glsl_main_keys_key_array_421, 14},
{0, 0},
{glsl_main_keys_key_array_423, 21},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_428, 3},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_431, 9},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_440, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_445, 37},
{0, 0},
{glsl_main_keys_key_array_447, 5},
{0, 0},
{glsl_main_keys_key_array_449, 5},
{glsl_main_keys_key_array_450, 5},
{glsl_main_keys_key_array_451, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_457, 26},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_460, 14},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_464, 34},
{glsl_main_keys_key_array_465, 15},
{0, 0},
{glsl_main_keys_key_array_467, 25},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_475, 5},
{0, 0},
{glsl_main_keys_key_array_477, 15},
{glsl_main_keys_key_array_478, 30},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_483, 5},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_494, 16},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_497, 4},
{glsl_main_keys_key_array_498, 4},
{glsl_main_keys_key_array_499, 8},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_504, 18},
{glsl_main_keys_key_array_505, 15},
{0, 0},
{glsl_main_keys_key_array_507, 4},
{glsl_main_keys_key_array_508, 5},
{0, 0},
{glsl_main_keys_key_array_510, 5},
{glsl_main_keys_key_array_511, 5},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_515, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_521, 24},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_527, 20},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_530, 15},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_547, 4},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_553, 18},
{0, 0},
{glsl_main_keys_key_array_555, 10},
{0, 0},
{glsl_main_keys_key_array_557, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_564, 12},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_567, 19},
{0, 0},
{glsl_main_keys_key_array_569, 28},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_572, 22},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_577, 4},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_581, 28},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_584, 16},
{glsl_main_keys_key_array_585, 34},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_594, 14},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_597, 15},
{glsl_main_keys_key_array_598, 21},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_602, 8},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_607, 6},
{glsl_main_keys_key_array_608, 6},
{glsl_main_keys_key_array_609, 11},
{glsl_main_keys_key_array_610, 5},
{glsl_main_keys_key_array_611, 10},
{0, 0},
{glsl_main_keys_key_array_613, 4},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_617, 6},
{glsl_main_keys_key_array_618, 14},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_627, 7},
{0, 0},
{glsl_main_keys_key_array_629, 34},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_632, 16},
{glsl_main_keys_key_array_633, 5},
{0, 0},
{glsl_main_keys_key_array_635, 5},
{glsl_main_keys_key_array_636, 5},
{glsl_main_keys_key_array_637, 9},
{glsl_main_keys_key_array_638, 31},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_641, 10},
{glsl_main_keys_key_array_642, 12},
{glsl_main_keys_key_array_643, 24},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_654, 15},
{0, 0},
{glsl_main_keys_key_array_656, 15},
{glsl_main_keys_key_array_657, 6},
{glsl_main_keys_key_array_658, 15},
{glsl_main_keys_key_array_659, 14},
{glsl_main_keys_key_array_660, 6},
{0, 0},
{glsl_main_keys_key_array_662, 5},
{glsl_main_keys_key_array_663, 3},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_667, 15},
{0, 0},
{glsl_main_keys_key_array_669, 13},
{0, 0},
{glsl_main_keys_key_array_671, 5},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_680, 14},
{glsl_main_keys_key_array_681, 25},
{glsl_main_keys_key_array_682, 18},
{glsl_main_keys_key_array_683, 6},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_686, 10},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_695, 13},
{0, 0},
{glsl_main_keys_key_array_697, 25},
{glsl_main_keys_key_array_698, 37},
{0, 0},
{glsl_main_keys_key_array_700, 4},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_704, 17},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_711, 13},
{glsl_main_keys_key_array_712, 12},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_724, 3},
{glsl_main_keys_key_array_725, 37},
{glsl_main_keys_key_array_726, 15},
{glsl_main_keys_key_array_727, 26},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_733, 11},
{glsl_main_keys_key_array_734, 5},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_740, 28},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_743, 12},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_748, 13},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_751, 17},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_756, 34},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_760, 11},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_776, 12},
{glsl_main_keys_key_array_777, 18},
{0, 0},
{glsl_main_keys_key_array_779, 11},
{glsl_main_keys_key_array_780, 6},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_783, 17},
{glsl_main_keys_key_array_784, 18},
{glsl_main_keys_key_array_785, 31},
{0, 0},
{glsl_main_keys_key_array_787, 29},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_800, 21},
{glsl_main_keys_key_array_801, 38},
{0, 0},
{glsl_main_keys_key_array_803, 18},
{0, 0},
{glsl_main_keys_key_array_805, 4},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_809, 27},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_812, 3},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_820, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_830, 6},
{glsl_main_keys_key_array_831, 21},
{glsl_main_keys_key_array_832, 14},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_840, 25},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_843, 3},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_846, 34},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_849, 26},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_852, 4},
{glsl_main_keys_key_array_853, 11},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_857, 2},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_866, 27},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_870, 9},
{glsl_main_keys_key_array_871, 15},
{0, 0},
{glsl_main_keys_key_array_873, 30},
{glsl_main_keys_key_array_874, 4},
{glsl_main_keys_key_array_875, 14},
{glsl_main_keys_key_array_876, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_884, 27},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_891, 24},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_896, 11},
{glsl_main_keys_key_array_897, 33},
{glsl_main_keys_key_array_898, 11},
{glsl_main_keys_key_array_899, 28},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_903, 4},
{glsl_main_keys_key_array_904, 4},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_912, 10},
{glsl_main_keys_key_array_913, 9},
{0, 0},
{glsl_main_keys_key_array_915, 14},
{glsl_main_keys_key_array_916, 11},
{glsl_main_keys_key_array_917, 9},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_922, 8},
{glsl_main_keys_key_array_923, 17},
{glsl_main_keys_key_array_924, 5},
{glsl_main_keys_key_array_925, 15},
{glsl_main_keys_key_array_926, 6},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_929, 18},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_933, 32},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_937, 13},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_950, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_960, 4},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_964, 18},
{glsl_main_keys_key_array_965, 19},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_968, 9},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_971, 20},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_975, 19},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_982, 13},
{glsl_main_keys_key_array_983, 27},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_986, 3},
{0, 0},
{glsl_main_keys_key_array_988, 14},
{0, 0},
{glsl_main_keys_key_array_990, 5},
{glsl_main_keys_key_array_991, 19},
{0, 0},
{glsl_main_keys_key_array_993, 13},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1001, 10},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1006, 7},
{glsl_main_keys_key_array_1007, 28},
{glsl_main_keys_key_array_1008, 15},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1015, 3},
{glsl_main_keys_key_array_1016, 8},
{glsl_main_keys_key_array_1017, 34},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1020, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1026, 4},
{glsl_main_keys_key_array_1027, 22},
{glsl_main_keys_key_array_1028, 21},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1033, 23},
{glsl_main_keys_key_array_1034, 6},
{glsl_main_keys_key_array_1035, 25},
{glsl_main_keys_key_array_1036, 14},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1039, 20},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1045, 14},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1048, 34},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1052, 6},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1055, 23},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1058, 32},
{glsl_main_keys_key_array_1059, 12},
{glsl_main_keys_key_array_1060, 20},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1064, 8},
{glsl_main_keys_key_array_1065, 13},
{glsl_main_keys_key_array_1066, 9},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1076, 3},
{glsl_main_keys_key_array_1077, 32},
{glsl_main_keys_key_array_1078, 26},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1094, 28},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1098, 9},
{glsl_main_keys_key_array_1099, 12},
{glsl_main_keys_key_array_1100, 29},
{0, 0},
{glsl_main_keys_key_array_1102, 22},
{glsl_main_keys_key_array_1103, 12},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1107, 15},
{0, 0},
{glsl_main_keys_key_array_1109, 14},
{0, 0},
{glsl_main_keys_key_array_1111, 5},
{glsl_main_keys_key_array_1112, 29},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1116, 13},
{glsl_main_keys_key_array_1117, 16},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1125, 29},
{0, 0},
{glsl_main_keys_key_array_1127, 3},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1131, 11},
{0, 0},
{glsl_main_keys_key_array_1133, 9},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1136, 17},
{glsl_main_keys_key_array_1137, 7},
{glsl_main_keys_key_array_1138, 17},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1141, 19},
{glsl_main_keys_key_array_1142, 33},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1148, 12},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1156, 17},
{glsl_main_keys_key_array_1157, 17},
{glsl_main_keys_key_array_1158, 17},
{glsl_main_keys_key_array_1159, 17},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1162, 17},
{glsl_main_keys_key_array_1163, 17},
{0, 0},
{glsl_main_keys_key_array_1165, 9},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1168, 10},
{0, 0},
{glsl_main_keys_key_array_1170, 3},
{glsl_main_keys_key_array_1171, 10},
{0, 0},
{glsl_main_keys_key_array_1173, 15},
{0, 0},
{glsl_main_keys_key_array_1175, 15},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1180, 17},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1187, 3},
{glsl_main_keys_key_array_1188, 37},
{0, 0},
{glsl_main_keys_key_array_1190, 6},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1193, 10},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1196, 22},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1200, 12},
{glsl_main_keys_key_array_1201, 13},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1206, 5},
{glsl_main_keys_key_array_1207, 26},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1214, 4},
{glsl_main_keys_key_array_1215, 42},
{0, 0},
{glsl_main_keys_key_array_1217, 19},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1231, 27},
{glsl_main_keys_key_array_1232, 12},
{0, 0},
{glsl_main_keys_key_array_1234, 12},
{glsl_main_keys_key_array_1235, 12},
{0, 0},
{glsl_main_keys_key_array_1237, 25},
{glsl_main_keys_key_array_1238, 17},
{0, 0},
{glsl_main_keys_key_array_1240, 7},
{glsl_main_keys_key_array_1241, 7},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1245, 7},
{glsl_main_keys_key_array_1246, 19},
{glsl_main_keys_key_array_1247, 12},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1250, 7},
{0, 0},
{glsl_main_keys_key_array_1252, 13},
{0, 0},
{glsl_main_keys_key_array_1254, 5},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1258, 7},
{glsl_main_keys_key_array_1259, 7},
{0, 0},
{glsl_main_keys_key_array_1261, 8},
{0, 0},
{glsl_main_keys_key_array_1263, 14},
{0, 0},
{glsl_main_keys_key_array_1265, 11},
{glsl_main_keys_key_array_1266, 16},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1269, 15},
{0, 0},
{glsl_main_keys_key_array_1271, 4},
{glsl_main_keys_key_array_1272, 26},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1282, 13},
{glsl_main_keys_key_array_1283, 19},
{glsl_main_keys_key_array_1284, 7},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1288, 17},
{glsl_main_keys_key_array_1289, 23},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1293, 3},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1297, 8},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1300, 20},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1303, 7},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1312, 11},
{glsl_main_keys_key_array_1313, 11},
{glsl_main_keys_key_array_1314, 19},
{glsl_main_keys_key_array_1315, 35},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1318, 3},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1326, 8},
{glsl_main_keys_key_array_1327, 8},
{glsl_main_keys_key_array_1328, 6},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1334, 13},
{glsl_main_keys_key_array_1335, 26},
{glsl_main_keys_key_array_1336, 14},
{0, 0},
{glsl_main_keys_key_array_1338, 20},
{glsl_main_keys_key_array_1339, 14},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1342, 5},
{0, 0},
{glsl_main_keys_key_array_1344, 17},
{0, 0},
{0, 0},
{0, 0},
{glsl_main_keys_key_array_1348, 29},
{0, 0},
{glsl_main_keys_key_array_1350, 9},
{glsl_main_keys_key_array_1351, 7},
{0, 0},
{glsl_main_keys_key_array_1353, 12},
{glsl_main_keys_key_array_1354, 17},
{glsl_main_keys_key_array_1355, 13},
{0, 0},
};
Lexeme_Table_Value glsl_main_keys_value_array[1357] = {
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxClipPlanes},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_TextureMatrix},
{18, TokenGLSLKind_gl_MaxViewports},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_atanh},
{0, 0},
{18, TokenGLSLKind_gl_MaxGeometryAtomicCounters},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessEvaluationInputComponents},
{0, 0},
{18, TokenGLSLKind_gl_MinProgramTexelOffset},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_smoothstep},
{18, TokenGLSLKind_gl_MaxTessControlAtomicCounters},
{0, 0},
{4, TokenGLSLKind_out},
{17, TokenGLSLKind_gl_WorkGroupSize},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_EndStreamPrimitive},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_samplerCubeArray},
{16, TokenGLSLKind_packUnorm4x8},
{0, 0},
{4, TokenGLSLKind_dvec4},
{16, TokenGLSLKind_atomicMin},
{4, TokenGLSLKind_dvec2},
{4, TokenGLSLKind_dvec3},
{0, 0},
{0, 0},
{16, TokenGLSLKind_equal},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_max},
{0, 0},
{4, TokenGLSLKind_dmat2},
{4, TokenGLSLKind_dmat3},
{0, 0},
{16, TokenGLSLKind_textureProjLod},
{16, TokenGLSLKind_EmitStreamVertex},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_dmat4},
{0, 0},
{4, TokenGLSLKind_case},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_isampler2D},
{16, TokenGLSLKind_bitfieldExtract},
{0, 0},
{18, TokenGLSLKind_gl_MaxImageUnits},
{0, 0},
{0, 0},
{4, TokenGLSLKind_float},
{4, TokenGLSLKind_samplerCubeShadow},
{16, TokenGLSLKind_trunc},
{18, TokenGLSLKind_gl_MaxGeometryUniformComponents},
{16, TokenGLSLKind_textureOffset},
{0, 0},
{17, TokenGLSLKind_gl_FragColor},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxVertexAttribs},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_atomicAnd},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_SampleMask},
{0, 0},
{18, TokenGLSLKind_gl_MaxTextureUnits},
{16, TokenGLSLKind_textureGatherOffset},
{0, 0},
{0, 0},
{16, TokenGLSLKind_exp2},
{16, TokenGLSLKind_matrixCompMult},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ModelViewProjectionMatrixInverseTranspose},
{16, TokenGLSLKind_atomicExchange},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_bitfieldReverse},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_dmat3x2},
{4, TokenGLSLKind_dmat3x3},
{4, TokenGLSLKind_dmat3x4},
{0, 0},
{17, TokenGLSLKind_gl_TextureMatrixInverse},
{0, 0},
{4, TokenGLSLKind_usampler3D},
{16, TokenGLSLKind_textureProjGrad},
{0, 0},
{16, TokenGLSLKind_packHalf2x16},
{4, TokenGLSLKind_sample},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_sampler1DArray},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_asinh},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_break},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_sin},
{16, TokenGLSLKind_interpolateAtSample},
{18, TokenGLSLKind_gl_MaxTextureImageUnits},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_barrier},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_flat},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_LightProducts},
{0, 0},
{16, TokenGLSLKind_unpackSnorm2x16},
{0, 0},
{4, TokenGLSLKind_uniform},
{18, TokenGLSLKind_gl_MaxTessEvaluationOutputComponents},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_PerVertex},
{18, TokenGLSLKind_gl_MaxVaryingVectors},
{16, TokenGLSLKind_uaddCarry},
{17, TokenGLSLKind_gl_PatchVerticesIn},
{0, 0},
{16, TokenGLSLKind_textureGrad},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_noise1},
{0, 0},
{0, 0},
{16, TokenGLSLKind_noise4},
{0, 0},
{4, TokenGLSLKind_Basics},
{0, 0},
{16, TokenGLSLKind_round},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_noise2},
{16, TokenGLSLKind_noise3},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_if},
{16, TokenGLSLKind_unpackSnorm4x8},
{4, TokenGLSLKind_isamplerBuffer},
{18, TokenGLSLKind_gl_MaxFragmentUniformComponents},
{18, TokenGLSLKind_gl_MaxComputeUniformComponents},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxComputeAtomicCounters},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessControlOutputComponents},
{17, TokenGLSLKind_gl_Position},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_FragCoord},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_TessLevelOuter},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_isampler2DMS},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_else},
{0, 0},
{16, TokenGLSLKind_isnan},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_sqrt},
{16, TokenGLSLKind_reflect},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_mix},
{0, 0},
{16, TokenGLSLKind_floor},
{0, 0},
{16, TokenGLSLKind_sinh},
{0, 0},
{0, 0},
{16, TokenGLSLKind_radians},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_return},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_FragDepth},
{18, TokenGLSLKind_gl_MaxComputeTextureImageUnits},
{4, TokenGLSLKind_sampler2D},
{0, 0},
{16, TokenGLSLKind_imageAtomicAdd},
{0, 0},
{16, TokenGLSLKind_log},
{0, 0},
{0, 0},
{4, TokenGLSLKind_precision},
{17, TokenGLSLKind_gl_LightSource},
{18, TokenGLSLKind_gl_MaxClipDistances},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_intBitsToFloat},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_TexCoord},
{4, TokenGLSLKind_struct},
{16, TokenGLSLKind_asin},
{0, 0},
{0, 0},
{16, TokenGLSLKind_imageAtomicOr},
{4, TokenGLSLKind_isampler2DArray},
{0, 0},
{4, TokenGLSLKind_varying},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ProjectionMatrixInverseTranspose},
{18, TokenGLSLKind_gl_MaxTessEvaluationAtomicCounterBuffers},
{0, 0},
{0, 0},
{16, TokenGLSLKind_memoryBarrierBuffer},
{0, 0},
{16, TokenGLSLKind_textureProjGradOffset},
{18, TokenGLSLKind_gl_MaxGeometryImageUniforms},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_LocalInvocationIndex},
{0, 0},
{16, TokenGLSLKind_packSnorm2x16},
{16, TokenGLSLKind_unpackUnorm4x8},
{16, TokenGLSLKind_bitfieldInsert},
{0, 0},
{4, TokenGLSLKind_usampler2DArray},
{4, TokenGLSLKind_sampler2DRectShadow},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_in},
{16, TokenGLSLKind_imulExtended},
{0, 0},
{16, TokenGLSLKind_isinf},
{4, TokenGLSLKind_centroid},
{16, TokenGLSLKind_interpolateAtOffset},
{18, TokenGLSLKind_gl_MaxVertexOutputComponents},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ModelViewProjectionMatrixInverse},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_in},
{16, TokenGLSLKind_min},
{0, 0},
{0, 0},
{4, TokenGLSLKind_isampler2DMSArray},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_attribute},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_mat3x2},
{4, TokenGLSLKind_mat3x3},
{4, TokenGLSLKind_mat3x4},
{0, 0},
{0, 0},
{16, TokenGLSLKind_ceil},
{18, TokenGLSLKind_gl_MaxGeometryTextureImageUnits},
{0, 0},
{16, TokenGLSLKind_step},
{0, 0},
{16, TokenGLSLKind_tanh},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_invariant},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_isampler3D},
{0, 0},
{4, TokenGLSLKind_vec4},
{16, TokenGLSLKind_EndPrimitive},
{4, TokenGLSLKind_vec2},
{4, TokenGLSLKind_vec3},
{16, TokenGLSLKind_imageAtomicAnd},
{0, 0},
{17, TokenGLSLKind_gl_BackSecondaryColor},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_pow},
{0, 0},
{0, 0},
{16, TokenGLSLKind_atomicXor},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_FrontMaterial},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessControlAtomicCounterBuffers},
{0, 0},
{4, TokenGLSLKind_bvec4},
{0, 0},
{4, TokenGLSLKind_bvec2},
{4, TokenGLSLKind_bvec3},
{16, TokenGLSLKind_findLSB},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxVertexUniformVectors},
{0, 0},
{0, 0},
{16, TokenGLSLKind_imageAtomicXor},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessEvaluationAtomicCounters},
{4, TokenGLSLKind_isampler1DArray},
{0, 0},
{18, TokenGLSLKind_gl_MaxVertexImageUniforms},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_highp},
{0, 0},
{17, TokenGLSLKind_gl_ClipDistance},
{18, TokenGLSLKind_gl_MaxGeometryOutputComponents},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_while},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_textureLodOffset},
{0, 0},
{0, 0},
{4, TokenGLSLKind_mat2},
{4, TokenGLSLKind_mat3},
{16, TokenGLSLKind_notEqual},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_PointParameters},
{17, TokenGLSLKind_gl_SampleMaskIn},
{0, 0},
{4, TokenGLSLKind_mat4},
{4, TokenGLSLKind_ivec4},
{0, 0},
{4, TokenGLSLKind_ivec2},
{4, TokenGLSLKind_ivec3},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_NumWorkGroups},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_BackLightModelProduct},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_LocalInvocationID},
{0, 0},
{0, 0},
{4, TokenGLSLKind_sampler1DShadow},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_atan},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_memoryBarrierImage},
{0, 0},
{16, TokenGLSLKind_usubBorrow},
{0, 0},
{17, TokenGLSLKind_gl_PrimitiveIDIn},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_BackColor},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxVaryingFloats},
{0, 0},
{18, TokenGLSLKind_gl_MaxCombinedAtomicCounters},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_FrontSecondaryColor},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_void},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxGeometryOutputVertices},
{0, 0},
{0, 0},
{16, TokenGLSLKind_unpackDouble2x32},
{17, TokenGLSLKind_gl_ModelViewMatrixInverseTranspose},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_isampler2DRect},
{0, 0},
{0, 0},
{16, TokenGLSLKind_textureQueryLod},
{17, TokenGLSLKind_gl_LightModelProducts},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_lessThan},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_mat4x2},
{4, TokenGLSLKind_mat4x3},
{17, TokenGLSLKind_gl_FogCoord},
{4, TokenGLSLKind_patch},
{16, TokenGLSLKind_imageStore},
{0, 0},
{16, TokenGLSLKind_acos},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_mat4x4},
{16, TokenGLSLKind_atomicCompSwap},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_mediump},
{0, 0},
{18, TokenGLSLKind_gl_MaxFragmentAtomicCounterBuffers},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_FogParameters},
{4, TokenGLSLKind_uvec4},
{0, 0},
{4, TokenGLSLKind_uvec2},
{4, TokenGLSLKind_uvec3},
{4, TokenGLSLKind_sampler3D},
{18, TokenGLSLKind_gl_MaxGeometryVaryingComponents},
{0, 0},
{0, 0},
{4, TokenGLSLKind_usampler1D},
{18, TokenGLSLKind_gl_MaxLights},
{17, TokenGLSLKind_gl_LightSourceParameters},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ObjectPlaneT},
{0, 0},
{17, TokenGLSLKind_gl_ObjectPlaneR},
{4, TokenGLSLKind_mat2x2},
{17, TokenGLSLKind_gl_ObjectPlaneS},
{17, TokenGLSLKind_gl_WorkGroupID},
{4, TokenGLSLKind_mat2x3},
{0, 0},
{16, TokenGLSLKind_acosh},
{16, TokenGLSLKind_dot},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ObjectPlaneQ},
{0, 0},
{4, TokenGLSLKind_noperspective},
{0, 0},
{16, TokenGLSLKind_clamp},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_PrimitiveID},
{18, TokenGLSLKind_gl_MaxVertexOutputVectors},
{17, TokenGLSLKind_gl_ModelViewMatrix},
{4, TokenGLSLKind_mat2x4},
{0, 0},
{0, 0},
{16, TokenGLSLKind_texelFetch},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_atomicCounter},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessPatchComponents},
{17, TokenGLSLKind_gl_ModelViewProjectionMatrixTranspose},
{0, 0},
{16, TokenGLSLKind_sign},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_usamplerCubeArray},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_LightModel},
{17, TokenGLSLKind_gl_TessCoord},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_tan},
{18, TokenGLSLKind_gl_MaxTessEvaluationTextureImageUnits},
{16, TokenGLSLKind_uintBitsToFloat},
{18, TokenGLSLKind_gl_MaxComputeWorkGroupSize},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_textureSize},
{16, TokenGLSLKind_ldexp},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxFragmentAtomicCounters},
{0, 0},
{0, 0},
{16, TokenGLSLKind_packSnorm4x8},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_packUnorm2x16},
{0, 0},
{0, 0},
{16, TokenGLSLKind_textureProjOffset},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxGeometryAtomicCounterBuffers},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_faceforward},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_usamplerCube},
{18, TokenGLSLKind_gl_MaxImageSamples},
{0, 0},
{17, TokenGLSLKind_gl_FragData},
{4, TokenGLSLKind_layout},
{0, 0},
{0, 0},
{4, TokenGLSLKind_usampler2DMSArray},
{16, TokenGLSLKind_textureQueryLevels},
{18, TokenGLSLKind_gl_MaxCombinedTextureImageUnits},
{0, 0},
{18, TokenGLSLKind_gl_MaxFragmentInputComponents},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_GlobalInvocationID},
{18, TokenGLSLKind_gl_MaxTessControlTotalOutputComponents},
{0, 0},
{17, TokenGLSLKind_gl_TextureEnvColor},
{0, 0},
{16, TokenGLSLKind_modf},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxComputeWorkGroupCount},
{0, 0},
{0, 0},
{16, TokenGLSLKind_all},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_degrees},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_double},
{17, TokenGLSLKind_gl_MaterialParameters},
{4, TokenGLSLKind_usamplerBuffer},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ModelViewMatrixInverse},
{0, 0},
{0, 0},
{16, TokenGLSLKind_fma},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessControlTextureImageUnits},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxFragmentInputVectors},
{0, 0},
{0, 0},
{8, TokenGLSLKind_LiteralTrue},
{16, TokenGLSLKind_greaterThan},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_do},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxFragmentImageUniforms},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_roundEven},
{16, TokenGLSLKind_floatBitsToUint},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessControlImageUniforms},
{4, TokenGLSLKind_uint},
{16, TokenGLSLKind_imageAtomicMax},
{17, TokenGLSLKind_gl_ViewportIndex},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ModelViewMatrixTranspose},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxProgramTexelOffset},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_SampleID},
{18, TokenGLSLKind_gl_MaxComputeAtomicCounterBuffers},
{16, TokenGLSLKind_textureProj},
{17, TokenGLSLKind_gl_ProjectionMatrixTranspose},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_dFdx},
{16, TokenGLSLKind_dFdy},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_isampler1D},
{16, TokenGLSLKind_atomicMax},
{0, 0},
{4, TokenGLSLKind_sampler2DArray},
{16, TokenGLSLKind_inversesqrt},
{17, TokenGLSLKind_gl_Vertex},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_bitCount},
{17, TokenGLSLKind_gl_SecondaryColor},
{8, TokenGLSLKind_LiteralFalse},
{4, TokenGLSLKind_sampler2DShadow},
{4, TokenGLSLKind_smooth},
{0, 0},
{0, 0},
{16, TokenGLSLKind_groupMemoryBarrier},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessControlInputComponents},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_lessThenEqual},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_greaterThanEqual},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_lowp},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessGenLevel},
{16, TokenGLSLKind_imageAtomicExchange},
{0, 0},
{0, 0},
{16, TokenGLSLKind_imageLoad},
{0, 0},
{0, 0},
{4, TokenGLSLKind_sampler1DArrayShadow},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTextureCoords},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_DepthRange},
{18, TokenGLSLKind_gl_MaxCombinedImageUniforms},
{0, 0},
{0, 0},
{16, TokenGLSLKind_not},
{0, 0},
{17, TokenGLSLKind_gl_NormalScale},
{0, 0},
{16, TokenGLSLKind_fract},
{16, TokenGLSLKind_imageAtomicCompSwap},
{0, 0},
{18, TokenGLSLKind_gl_NumSamples},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_textureLod},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_findMSB},
{18, TokenGLSLKind_gl_MaxFragmentUniformVectors},
{17, TokenGLSLKind_gl_InvocationID},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_mod},
{16, TokenGLSLKind_atomicOr},
{18, TokenGLSLKind_gl_MaxCombinedAtomicCounterBuffers},
{0, 0},
{0, 0},
{16, TokenGLSLKind_inverse},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_bool},
{16, TokenGLSLKind_atomicCounterDecrement},
{16, TokenGLSLKind_interpolateAtCentroid},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_DepthRangeParameters},
{17, TokenGLSLKind_gl_out},
{17, TokenGLSLKind_gl_TextureMatrixTranspose},
{16, TokenGLSLKind_imageAtomicMin},
{0, 0},
{0, 0},
{16, TokenGLSLKind_textureProjLodOffset},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_usampler2DRect},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxTessControlUniformComponents},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_fwidth},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_LightModelParameters},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxVertexAtomicCounterBuffers},
{16, TokenGLSLKind_outerProduct},
{17, TokenGLSLKind_gl_FrontLightProduct},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_Point},
{17, TokenGLSLKind_gl_FrontColor},
{16, TokenGLSLKind_normalize},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_for},
{17, TokenGLSLKind_gl_TextureMatrixInverseTranspose},
{16, TokenGLSLKind_memoryBarrierAtomicCounter},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_ModelViewProjectionMatrix},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_transpose},
{17, TokenGLSLKind_gl_ClipPlane},
{18, TokenGLSLKind_gl_MaxVertexTextureImageUnits},
{0, 0},
{4, TokenGLSLKind_samplerCubeArrayShadow},
{16, TokenGLSLKind_umulExtended},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_unpackUnorm2x16},
{0, 0},
{16, TokenGLSLKind_unpackHalf2x16},
{0, 0},
{4, TokenGLSLKind_const},
{18, TokenGLSLKind_gl_MaxGeometryInputComponents},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_InstanceID},
{16, TokenGLSLKind_texelFetchOffset},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxVertexUniformComponents},
{0, 0},
{16, TokenGLSLKind_any},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_VertexID},
{0, 0},
{4, TokenGLSLKind_sampler1D},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_MultiTexCoord6},
{16, TokenGLSLKind_texture},
{17, TokenGLSLKind_gl_MultiTexCoord7},
{0, 0},
{0, 0},
{16, TokenGLSLKind_memoryBarrierShared},
{18, TokenGLSLKind_gl_MaxTessEvaluationImageUniforms},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_usampler2DMS},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_MultiTexCoord2},
{17, TokenGLSLKind_gl_MultiTexCoord3},
{17, TokenGLSLKind_gl_MultiTexCoord4},
{17, TokenGLSLKind_gl_MultiTexCoord5},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_MultiTexCoord0},
{17, TokenGLSLKind_gl_MultiTexCoord1},
{0, 0},
{16, TokenGLSLKind_imageSize},
{0, 0},
{0, 0},
{4, TokenGLSLKind_subroutine},
{0, 0},
{4, TokenGLSLKind_int},
{4, TokenGLSLKind_usampler2D},
{0, 0},
{17, TokenGLSLKind_gl_BackMaterial},
{0, 0},
{17, TokenGLSLKind_gl_NormalMatrix},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_TessLevelInner},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_abs},
{18, TokenGLSLKind_gl_MaxTessEvaluationUniformComponents},
{0, 0},
{4, TokenGLSLKind_switch},
{0, 0},
{0, 0},
{16, TokenGLSLKind_EmitVertex},
{0, 0},
{0, 0},
{16, TokenGLSLKind_atomicCounterIncrement},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_PointSize},
{17, TokenGLSLKind_gl_PointCoord},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_cross},
{18, TokenGLSLKind_gl_MaxComputeImageUniforms},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_log2},
{18, TokenGLSLKind_gl_MaxCombinedImageUnitsAndFragmentOutputs},
{0, 0},
{18, TokenGLSLKind_gl_MaxVaryingVector},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxAtomicCounterBindings},
{17, TokenGLSLKind_gl_EyePlaneT},
{0, 0},
{17, TokenGLSLKind_gl_EyePlaneR},
{17, TokenGLSLKind_gl_EyePlaneS},
{0, 0},
{17, TokenGLSLKind_gl_FrontLightModelProduct},
{18, TokenGLSLKind_gl_MaxDrawBuffers},
{0, 0},
{4, TokenGLSLKind_dmat4x2},
{4, TokenGLSLKind_dmat4x3},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_refract},
{17, TokenGLSLKind_gl_BackLightProduct},
{17, TokenGLSLKind_gl_EyePlaneQ},
{0, 0},
{0, 0},
{4, TokenGLSLKind_dmat4x4},
{0, 0},
{4, TokenGLSLKind_sampler2DRect},
{0, 0},
{16, TokenGLSLKind_frexp},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_dmat2x2},
{4, TokenGLSLKind_dmat2x3},
{0, 0},
{4, TokenGLSLKind_continue},
{0, 0},
{16, TokenGLSLKind_packDouble2x32},
{0, 0},
{4, TokenGLSLKind_samplerCube},
{4, TokenGLSLKind_sampler2DMSArray},
{0, 0},
{0, 0},
{4, TokenGLSLKind_usampler1DArray},
{0, 0},
{16, TokenGLSLKind_cosh},
{18, TokenGLSLKind_gl_MaxVertexAtomicCounters},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_memoryBarrier},
{17, TokenGLSLKind_gl_MaxPatchVertices},
{4, TokenGLSLKind_dmat2x4},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_SamplePosition},
{18, TokenGLSLKind_gl_MaxVaryingComponents},
{0, 0},
{0, 0},
{0, 0},
{16, TokenGLSLKind_cos},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_Layer},
{0, 0},
{0, 0},
{16, TokenGLSLKind_textureGatherOffsets},
{0, 0},
{0, 0},
{4, TokenGLSLKind_discard},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_sampler2DMS},
{16, TokenGLSLKind_determinant},
{17, TokenGLSLKind_gl_ProjectionMatrix},
{18, TokenGLSLKind_gl_MaxGeometryTotalOutputComponents},
{0, 0},
{0, 0},
{16, TokenGLSLKind_exp},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{17, TokenGLSLKind_gl_Color},
{16, TokenGLSLKind_distance},
{16, TokenGLSLKind_length},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{4, TokenGLSLKind_samplerBuffer},
{17, TokenGLSLKind_gl_ProjectionMatrixInverse},
{17, TokenGLSLKind_gl_FrontFacing},
{0, 0},
{4, TokenGLSLKind_sampler2DArrayShadow},
{16, TokenGLSLKind_floatBitsToInt},
{0, 0},
{0, 0},
{4, TokenGLSLKind_inout},
{0, 0},
{4, TokenGLSLKind_isamplerCubeArray},
{0, 0},
{0, 0},
{0, 0},
{18, TokenGLSLKind_gl_MaxAtomicCounterBufferSize},
{0, 0},
{16, TokenGLSLKind_atomicAdd},
{4, TokenGLSLKind_default},
{0, 0},
{4, TokenGLSLKind_isamplerCube},
{16, TokenGLSLKind_textureGradOffset},
{16, TokenGLSLKind_textureGather},
{0, 0},
};
i32 glsl_main_keys_slot_count = 1357;
u64 glsl_main_keys_seed = 0x88b46560963a7c56;
u64 glsl_pp_directives_hash_array[25] = {
0x0271ead977b43d53,0x0000000000000000,0xfc3746916e19c707,0xf697a39e24624173,
0x0000000000000000,0xaa5c358f21f506f3,0xfc37469162f676cf,0xaa5c34ef4b5512a9,
0x0000000000000000,0x0000000000000000,0xd2b2565d9aa9010f,0x0000000000000000,
0x0000000000000000,0x7713b86d0c1d520f,0xfc37468e26a72707,0x0000000000000000,
0xaa5c35b051751a07,0x0000000000000000,0xf697a39e24751acf,0x94d5903ae3fd0d53,
0x0000000000000000,0xfc37469163657f17,0x0000000000000000,0xa17d0758b7d59e4f,
0xf697a39e247518ad,
};
u8 glsl_pp_directives_key_array_0[] = {0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,};
u8 glsl_pp_directives_key_array_2[] = {0x69,0x66,0x64,0x65,0x66,};
u8 glsl_pp_directives_key_array_3[] = {0x6c,0x69,0x6e,0x65,};
u8 glsl_pp_directives_key_array_5[] = {0x64,0x65,0x66,0x69,0x6e,0x65,};
u8 glsl_pp_directives_key_array_6[] = {0x65,0x6e,0x64,0x69,0x66,};
u8 glsl_pp_directives_key_array_7[] = {0x70,0x72,0x61,0x67,0x6d,0x61,};
u8 glsl_pp_directives_key_array_10[] = {0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,};
u8 glsl_pp_directives_key_array_13[] = {0x65,0x78,0x74,0x65,0x6e,0x73,0x69,0x6f,0x6e,};
u8 glsl_pp_directives_key_array_14[] = {0x75,0x6e,0x64,0x65,0x66,};
u8 glsl_pp_directives_key_array_16[] = {0x69,0x66,0x6e,0x64,0x65,0x66,};
u8 glsl_pp_directives_key_array_18[] = {0x65,0x6c,0x69,0x66,};
u8 glsl_pp_directives_key_array_19[] = {0x70,0x69,0x78,0x65,0x6c,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,};
u8 glsl_pp_directives_key_array_21[] = {0x65,0x72,0x72,0x6f,0x72,};
u8 glsl_pp_directives_key_array_23[] = {0x69,0x66,};
u8 glsl_pp_directives_key_array_24[] = {0x65,0x6c,0x73,0x65,};
String_Const_u8 glsl_pp_directives_key_array[25] = {
{glsl_pp_directives_key_array_0, 13},
{0, 0},
{glsl_pp_directives_key_array_2, 5},
{glsl_pp_directives_key_array_3, 4},
{0, 0},
{glsl_pp_directives_key_array_5, 6},
{glsl_pp_directives_key_array_6, 5},
{glsl_pp_directives_key_array_7, 6},
{0, 0},
{0, 0},
{glsl_pp_directives_key_array_10, 7},
{0, 0},
{0, 0},
{glsl_pp_directives_key_array_13, 9},
{glsl_pp_directives_key_array_14, 5},
{0, 0},
{glsl_pp_directives_key_array_16, 6},
{0, 0},
{glsl_pp_directives_key_array_18, 4},
{glsl_pp_directives_key_array_19, 12},
{0, 0},
{glsl_pp_directives_key_array_21, 5},
{0, 0},
{glsl_pp_directives_key_array_23, 2},
{glsl_pp_directives_key_array_24, 4},
};
Lexeme_Table_Value glsl_pp_directives_value_array[25] = {
{5, TokenGLSLKind_PPVertexShader},
{0, 0},
{5, TokenGLSLKind_PPIfDef},
{5, TokenGLSLKind_PPLine},
{0, 0},
{5, TokenGLSLKind_PPDefine},
{5, TokenGLSLKind_PPEndIf},
{5, TokenGLSLKind_PPPragma},
{0, 0},
{0, 0},
{5, TokenGLSLKind_PPVersion},
{0, 0},
{0, 0},
{5, TokenGLSLKind_PPExtension},
{5, TokenGLSLKind_PPUndef},
{0, 0},
{5, TokenGLSLKind_PPIfNDef},
{0, 0},
{5, TokenGLSLKind_PPElIf},
{5, TokenGLSLKind_PPPixelShader},
{0, 0},
{5, TokenGLSLKind_PPError},
{0, 0},
{5, TokenGLSLKind_PPIf},
{5, TokenGLSLKind_PPElse},
};
i32 glsl_pp_directives_slot_count = 25;
u64 glsl_pp_directives_seed = 0x35ae2f9cdf9aec2e;
u64 glsl_pp_keys_hash_array[2] = {
0x800e0707a169d721,0x0000000000000000,
};
u8 glsl_pp_keys_key_array_0[] = {0x64,0x65,0x66,0x69,0x6e,0x65,0x64,};
String_Const_u8 glsl_pp_keys_key_array[2] = {
{glsl_pp_keys_key_array_0, 7},
{0, 0},
};
Lexeme_Table_Value glsl_pp_keys_value_array[2] = {
{4, TokenGLSLKind_PPDefined},
{0, 0},
};
i32 glsl_pp_keys_slot_count = 2;
u64 glsl_pp_keys_seed = 0xd40a29ad15270b6e;
struct Lex_State_GLSL{
u32 flags_ZF0;
u32 flags_KF0;
u16 flags_KB0;
u8 *base;
u8 *delim_first;
u8 *delim_one_past_last;
u8 *emit_ptr;
u8 *ptr;
u8 *opl_ptr;
};
internal void
lex_full_input_glsl_init(Lex_State_GLSL *state_ptr, String_Const_u8 input){
state_ptr->flags_ZF0 = 0;
state_ptr->flags_KF0 = 0;
state_ptr->flags_KB0 = 0;
state_ptr->base = input.str;
state_ptr->delim_first = input.str;
state_ptr->delim_one_past_last = input.str;
state_ptr->emit_ptr = input.str;
state_ptr->ptr = input.str;
state_ptr->opl_ptr = input.str + input.size;
}
internal b32
lex_full_input_glsl_breaks(Arena *arena, Token_List *list, Lex_State_GLSL *state_ptr, u64 max){
b32 result = false;
u64 emit_counter = 0;
Lex_State_GLSL state;
block_copy_struct(&state, state_ptr);
{
state_label_1: // root
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_EOF;
token.kind = 0;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
result = true;
goto end;
}
}
switch (*state.ptr){
case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:
case 0x07:case 0x08:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:
case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:
case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:case 0x22:
case 0x40:case 0x60:case 0x7f:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x09:case 0x0b:case 0x0c:case 0x0d:case 0x20:
{
if ((HasFlag(state.flags_KF0, 0x1))){
state.ptr += 1;
goto state_label_4; // error_body
}
if ((HasFlag(state.flags_KF0, 0x2) && !HasFlag(state.flags_KF0, 0x1))){
state.ptr += 1;
goto state_label_5; // version_body
}
state.ptr += 1;
goto state_label_3; // whitespace
}break;
case 0x0a:
{
state.ptr += 1;
state.flags_KB0 &= ~(0x1);
state.flags_KF0 &= ~(0x1);
state.flags_KF0 &= ~(0x2);
goto state_label_3; // whitespace
}break;
case 0x21:
{
state.ptr += 1;
goto state_label_60; // op stage
}break;
case 0x23:
{
if ((!HasFlag(state.flags_KB0, 0x1))){
state.ptr += 1;
goto state_label_24; // pp_directive_whitespace
}
state.ptr += 1;
goto state_label_67; // op stage
}break;
default:
{
state.ptr += 1;
goto state_label_2; // identifier
}break;
case 0x25:
{
state.ptr += 1;
goto state_label_64; // op stage
}break;
case 0x26:
{
state.ptr += 1;
goto state_label_61; // op stage
}break;
case 0x27:
{
state.ptr += 1;
state.flags_ZF0 |= 0x40;
goto state_label_31; // string
}break;
case 0x28:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_ParenOp;
token.kind = 13;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x29:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_ParenCl;
token.kind = 14;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2a:
{
state.ptr += 1;
goto state_label_63; // op stage
}break;
case 0x2b:
{
state.ptr += 1;
goto state_label_53; // op stage
}break;
case 0x2c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Comma;
token.kind = 15;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2d:
{
state.ptr += 1;
goto state_label_54; // op stage
}break;
case 0x2e:
{
state.ptr += 1;
goto state_label_7; // operator_or_fnumber_dot
}break;
case 0x2f:
{
state.ptr += 1;
goto state_label_8; // operator_or_comment_slash
}break;
case 0x30:
{
state.ptr += 1;
goto state_label_10; // znumber
}break;
case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:case 0x37:
case 0x38:case 0x39:
{
state.ptr += 1;
goto state_label_9; // number
}break;
case 0x3a:
{
state.ptr += 1;
goto state_label_52; // op stage
}break;
case 0x3b:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Semicolon;
token.kind = 15;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3c:
{
state.ptr += 1;
goto state_label_56; // op stage
}break;
case 0x3d:
{
state.ptr += 1;
goto state_label_59; // op stage
}break;
case 0x3e:
{
state.ptr += 1;
goto state_label_57; // op stage
}break;
case 0x3f:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Ternary;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:
{
state.ptr += 1;
state.flags_ZF0 |= 0x4;
goto state_label_26; // pre_L
}break;
case 0x52:
{
state.ptr += 1;
goto state_label_30; // pre_R
}break;
case 0x55:
{
state.ptr += 1;
state.flags_ZF0 |= 0x20;
goto state_label_28; // pre_U
}break;
case 0x5b:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_BrackOp;
token.kind = 13;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x5c:
{
state.ptr += 1;
goto state_label_6; // backslash
}break;
case 0x5d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_BrackCl;
token.kind = 14;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x5e:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Xor;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x75:
{
state.ptr += 1;
state.flags_ZF0 |= 0x10;
goto state_label_27; // pre_u
}break;
case 0x7b:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_BraceOp;
token.kind = 11;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x7c:
{
state.ptr += 1;
goto state_label_62; // op stage
}break;
case 0x7d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_BraceCl;
token.kind = 12;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x7e:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Tilde;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_2: // identifier
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_KB0, 0x1)){
Lexeme_Table_Lookup lookup = lexeme_table_lookup(glsl_pp_keys_hash_array, glsl_pp_keys_key_array, glsl_pp_keys_value_array, glsl_pp_keys_slot_count, glsl_pp_keys_seed, state.emit_ptr, token.size);
if (lookup.found_match){
token.kind = lookup.base_kind;
token.sub_kind = lookup.sub_kind;
break;
}
}
Lexeme_Table_Lookup lookup = lexeme_table_lookup(glsl_main_keys_hash_array, glsl_main_keys_key_array, glsl_main_keys_value_array, glsl_main_keys_slot_count, glsl_main_keys_seed, state.emit_ptr, token.size);
if (lookup.found_match){
token.kind = lookup.base_kind;
token.sub_kind = lookup.sub_kind;
break;
}
token.sub_kind = TokenGLSLKind_Identifier;
token.kind = 6;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:
case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:
case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:
case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:
case 0x1c:case 0x1d:case 0x1e:case 0x1f:case 0x20:case 0x21:case 0x22:
case 0x23:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:
case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:case 0x3a:case 0x3b:
case 0x3c:case 0x3d:case 0x3e:case 0x3f:case 0x40:case 0x5b:case 0x5c:
case 0x5d:case 0x5e:case 0x60:case 0x7b:case 0x7c:case 0x7d:case 0x7e:
case 0x7f:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_KB0, 0x1)){
Lexeme_Table_Lookup lookup = lexeme_table_lookup(glsl_pp_keys_hash_array, glsl_pp_keys_key_array, glsl_pp_keys_value_array, glsl_pp_keys_slot_count, glsl_pp_keys_seed, state.emit_ptr, token.size);
if (lookup.found_match){
token.kind = lookup.base_kind;
token.sub_kind = lookup.sub_kind;
break;
}
}
Lexeme_Table_Lookup lookup = lexeme_table_lookup(glsl_main_keys_hash_array, glsl_main_keys_key_array, glsl_main_keys_value_array, glsl_main_keys_slot_count, glsl_main_keys_seed, state.emit_ptr, token.size);
if (lookup.found_match){
token.kind = lookup.base_kind;
token.sub_kind = lookup.sub_kind;
break;
}
token.sub_kind = TokenGLSLKind_Identifier;
token.kind = 6;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
default:
{
state.ptr += 1;
goto state_label_2; // identifier
}break;
}
}
{
state_label_3: // whitespace
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Whitespace;
token.kind = 1;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Whitespace;
token.kind = 1;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x09:case 0x0b:case 0x0c:case 0x0d:case 0x20:
{
state.ptr += 1;
goto state_label_3; // whitespace
}break;
case 0x0a:
{
state.ptr += 1;
state.flags_KB0 &= ~(0x1);
state.flags_KF0 &= ~(0x1);
state.flags_KF0 &= ~(0x2);
goto state_label_3; // whitespace
}break;
}
}
{
state_label_4: // error_body
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PPErrorMessage;
token.kind = 10;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_4; // error_body
}break;
case 0x0a:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PPErrorMessage;
token.kind = 10;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_5: // version_body
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PPVersionMessage;
token.kind = 10;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_5; // version_body
}break;
case 0x0a:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PPVersionMessage;
token.kind = 10;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_6: // backslash
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Backslash;
token.kind = 1;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Backslash;
token.kind = 1;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x0a:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Backslash;
token.kind = 1;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x0d:
{
state.ptr += 1;
goto state_label_6; // backslash
}break;
}
}
{
state_label_7: // operator_or_fnumber_dot
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Dot;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Dot;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2a:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_DotStar;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2e:
{
state.ptr += 1;
goto state_label_68; // op stage
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:
{
state.ptr += 1;
goto state_label_11; // fnumber_decimal
}break;
}
}
{
state_label_8: // operator_or_comment_slash
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Div;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Div;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2a:
{
state.ptr += 1;
goto state_label_48; // comment_block
}break;
case 0x2f:
{
state.ptr += 1;
goto state_label_50; // comment_line
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_DivEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_9: // number
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralInteger;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralInteger;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2e:
{
state.ptr += 1;
goto state_label_11; // fnumber_decimal
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:
{
state.ptr += 1;
goto state_label_9; // number
}break;
case 0x45:case 0x65:
{
state.ptr += 1;
goto state_label_12; // fnumber_exponent
}break;
case 0x4c:
{
state.ptr += 1;
goto state_label_19; // L_number
}break;
case 0x55:case 0x75:
{
state.ptr += 1;
goto state_label_18; // U_number
}break;
case 0x6c:
{
state.ptr += 1;
goto state_label_21; // l_number
}break;
}
}
{
state_label_10: // znumber
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralInteger;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralInteger;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2e:
{
state.ptr += 1;
goto state_label_11; // fnumber_decimal
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:
{
state.ptr += 1;
state.flags_ZF0 |= 0x2;
goto state_label_17; // number_oct
}break;
case 0x45:case 0x65:
{
state.ptr += 1;
goto state_label_12; // fnumber_exponent
}break;
case 0x4c:
{
state.ptr += 1;
goto state_label_19; // L_number
}break;
case 0x55:case 0x75:
{
state.ptr += 1;
goto state_label_18; // U_number
}break;
case 0x58:case 0x78:
{
state.ptr += 1;
state.flags_ZF0 |= 0x1;
goto state_label_15; // number_hex_first
}break;
case 0x6c:
{
state.ptr += 1;
goto state_label_21; // l_number
}break;
}
}
{
state_label_11: // fnumber_decimal
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:
{
state.ptr += 1;
goto state_label_11; // fnumber_decimal
}break;
case 0x45:case 0x65:
{
state.ptr += 1;
goto state_label_12; // fnumber_exponent
}break;
case 0x46:case 0x66:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat32;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:case 0x6c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_12: // fnumber_exponent
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2b:case 0x2d:
{
state.ptr += 1;
goto state_label_13; // fnumber_exponent_sign
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:
{
state.ptr += 1;
goto state_label_14; // fnumber_exponent_digits
}break;
case 0x46:case 0x66:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat32;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:case 0x6c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_13: // fnumber_exponent_sign
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:
{
state.ptr += 1;
goto state_label_14; // fnumber_exponent_digits
}break;
case 0x46:case 0x66:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat32;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:case 0x6c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_14: // fnumber_exponent_digits
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:
{
state.ptr += 1;
goto state_label_14; // fnumber_exponent_digits
}break;
case 0x46:case 0x66:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat32;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:case 0x6c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralFloat64;
token.kind = 9;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_15: // number_hex_first
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_16; // number_hex
}break;
}
}
{
state_label_16: // number_hex
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralIntegerHex;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralIntegerHex;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_16; // number_hex
}break;
case 0x4c:
{
state.ptr += 1;
goto state_label_19; // L_number
}break;
case 0x55:case 0x75:
{
state.ptr += 1;
goto state_label_18; // U_number
}break;
case 0x6c:
{
state.ptr += 1;
goto state_label_21; // l_number
}break;
}
}
{
state_label_17: // number_oct
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralIntegerOct;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LiteralIntegerOct;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:
{
state.ptr += 1;
state.flags_ZF0 |= 0x2;
goto state_label_17; // number_oct
}break;
case 0x4c:
{
state.ptr += 1;
goto state_label_19; // L_number
}break;
case 0x55:case 0x75:
{
state.ptr += 1;
goto state_label_18; // U_number
}break;
case 0x6c:
{
state.ptr += 1;
goto state_label_21; // l_number
}break;
}
}
{
state_label_18: // U_number
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexU;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctU;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerU;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexU;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctU;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerU;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:
{
state.ptr += 1;
goto state_label_20; // UL_number
}break;
case 0x6c:
{
state.ptr += 1;
goto state_label_22; // Ul_number
}break;
}
}
{
state_label_19: // L_number
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:
{
state.ptr += 1;
goto state_label_23; // LL_number
}break;
case 0x55:case 0x75:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexUL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctUL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerUL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_20: // UL_number
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexUL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctUL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerUL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexUL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctUL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerUL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x4c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexULL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctULL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerULL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_21: // l_number
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x55:case 0x75:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexUL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctUL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerUL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x6c:
{
state.ptr += 1;
goto state_label_23; // LL_number
}break;
}
}
{
state_label_22: // Ul_number
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexUL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctUL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerUL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexUL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctUL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerUL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x6c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexULL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctULL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerULL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_23: // LL_number
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexLL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctLL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerLL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexLL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctLL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerLL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x55:case 0x75:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x1)){
token.sub_kind = TokenGLSLKind_LiteralIntegerHexULL;
token.kind = 8;
break;
}
if (HasFlag(state.flags_ZF0, 0x2)){
token.sub_kind = TokenGLSLKind_LiteralIntegerOctULL;
token.kind = 8;
break;
}
token.sub_kind = TokenGLSLKind_LiteralIntegerULL;
token.kind = 8;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_24: // pp_directive_whitespace
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x09:case 0x0b:case 0x0c:case 0x20:
{
state.ptr += 1;
goto state_label_24; // pp_directive_whitespace
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x47:case 0x48:case 0x49:case 0x4a:case 0x4b:
case 0x4c:case 0x4d:case 0x4e:case 0x4f:case 0x50:case 0x51:case 0x52:
case 0x53:case 0x54:case 0x55:case 0x56:case 0x57:case 0x58:case 0x59:
case 0x5a:case 0x5f:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:
case 0x6d:case 0x6e:case 0x6f:case 0x70:case 0x71:case 0x72:case 0x73:
case 0x74:case 0x75:case 0x76:case 0x77:case 0x78:case 0x79:case 0x7a:
{
state.delim_first = state.ptr;
state.flags_KB0 |= 0x1;
state.ptr += 1;
goto state_label_25; // pp_directive
}break;
}
}
{
state_label_25: // pp_directive
if (state.ptr == state.opl_ptr){
if ((true)){
state.delim_one_past_last = state.ptr;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
Lexeme_Table_Lookup lookup = lexeme_table_lookup(glsl_pp_directives_hash_array, glsl_pp_directives_key_array, glsl_pp_directives_value_array, glsl_pp_directives_slot_count, glsl_pp_directives_seed, state.delim_first, (state.delim_one_past_last - state.delim_first));
if (lookup.found_match){
token.kind = lookup.base_kind;
token.sub_kind = lookup.sub_kind;
break;
}
token.sub_kind = TokenGLSLKind_PPUnknown;
token.kind = 2;
}while(0);
switch (token.sub_kind){
case TokenGLSLKind_PPError:
{
state.flags_KF0 |= 0x1;
}break;
case TokenGLSLKind_PPVersion:
{
state.flags_KF0 |= 0x2;
}break;
}
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
state.delim_one_past_last = state.ptr;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
Lexeme_Table_Lookup lookup = lexeme_table_lookup(glsl_pp_directives_hash_array, glsl_pp_directives_key_array, glsl_pp_directives_value_array, glsl_pp_directives_slot_count, glsl_pp_directives_seed, state.delim_first, (state.delim_one_past_last - state.delim_first));
if (lookup.found_match){
token.kind = lookup.base_kind;
token.sub_kind = lookup.sub_kind;
break;
}
token.sub_kind = TokenGLSLKind_PPUnknown;
token.kind = 2;
}while(0);
switch (token.sub_kind){
case TokenGLSLKind_PPError:
{
state.flags_KF0 |= 0x1;
}break;
case TokenGLSLKind_PPVersion:
{
state.flags_KF0 |= 0x2;
}break;
}
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x47:case 0x48:case 0x49:case 0x4a:case 0x4b:
case 0x4c:case 0x4d:case 0x4e:case 0x4f:case 0x50:case 0x51:case 0x52:
case 0x53:case 0x54:case 0x55:case 0x56:case 0x57:case 0x58:case 0x59:
case 0x5a:case 0x5f:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:
case 0x6d:case 0x6e:case 0x6f:case 0x70:case 0x71:case 0x72:case 0x73:
case 0x74:case 0x75:case 0x76:case 0x77:case 0x78:case 0x79:case 0x7a:
{
state.ptr += 1;
goto state_label_25; // pp_directive
}break;
}
}
{
state_label_26: // pre_L
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_2; // identifier
}
}
switch (*state.ptr){
default:
{
goto state_label_2; // identifier
}break;
case 0x22:
{
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x52:
{
state.ptr += 1;
goto state_label_30; // pre_R
}break;
}
}
{
state_label_27: // pre_u
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_2; // identifier
}
}
switch (*state.ptr){
default:
{
goto state_label_2; // identifier
}break;
case 0x22:
{
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x38:
{
state.ptr += 1;
state.flags_ZF0 |= 0x8;
goto state_label_29; // pre_u8
}break;
case 0x52:
{
state.ptr += 1;
goto state_label_30; // pre_R
}break;
}
}
{
state_label_28: // pre_U
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_2; // identifier
}
}
switch (*state.ptr){
default:
{
goto state_label_2; // identifier
}break;
case 0x22:
{
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x52:
{
state.ptr += 1;
goto state_label_30; // pre_R
}break;
}
}
{
state_label_29: // pre_u8
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_2; // identifier
}
}
switch (*state.ptr){
default:
{
goto state_label_2; // identifier
}break;
case 0x22:
{
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x52:
{
state.ptr += 1;
goto state_label_30; // pre_R
}break;
}
}
{
state_label_30: // pre_R
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_2; // identifier
}
}
switch (*state.ptr){
default:
{
goto state_label_2; // identifier
}break;
case 0x22:
{
state.ptr += 1;
state.delim_first = state.ptr;
goto state_label_44; // raw_string_get_delim
}break;
}
}
{
state_label_31: // string
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x0a:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x22:
{
if ((!HasFlag(state.flags_ZF0, 0x40))){
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x4)){
token.sub_kind = TokenGLSLKind_LiteralStringWide;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x8)){
token.sub_kind = TokenGLSLKind_LiteralStringUTF8;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x10)){
token.sub_kind = TokenGLSLKind_LiteralStringUTF16;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x20)){
token.sub_kind = TokenGLSLKind_LiteralStringUTF32;
token.kind = 10;
break;
}
token.sub_kind = TokenGLSLKind_LiteralString;
token.kind = 10;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x27:
{
if ((HasFlag(state.flags_ZF0, 0x40))){
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x4)){
token.sub_kind = TokenGLSLKind_LiteralCharacterWide;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x8)){
token.sub_kind = TokenGLSLKind_LiteralCharacterUTF8;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x10)){
token.sub_kind = TokenGLSLKind_LiteralCharacterUTF16;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x20)){
token.sub_kind = TokenGLSLKind_LiteralCharacterUTF32;
token.kind = 10;
break;
}
token.sub_kind = TokenGLSLKind_LiteralCharacter;
token.kind = 10;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x5c:
{
state.ptr += 1;
goto state_label_32; // string_esc
}break;
}
}
{
state_label_32: // string_esc
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_EOF;
token.kind = 0;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
result = true;
goto end;
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:
{
state.ptr += 1;
goto state_label_33; // string_esc_oct2
}break;
case 0x55:
{
state.ptr += 1;
goto state_label_36; // string_esc_universal_8
}break;
case 0x75:
{
state.ptr += 1;
goto state_label_40; // string_esc_universal_4
}break;
case 0x78:
{
state.ptr += 1;
goto state_label_35; // string_esc_hex
}break;
}
}
{
state_label_33: // string_esc_oct2
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:
{
state.ptr += 1;
goto state_label_34; // string_esc_oct1
}break;
}
}
{
state_label_34: // string_esc_oct1
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:
{
state.ptr += 1;
goto state_label_31; // string
}break;
}
}
{
state_label_35: // string_esc_hex
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_35; // string_esc_hex
}break;
}
}
{
state_label_36: // string_esc_universal_8
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_37; // string_esc_universal_7
}break;
}
}
{
state_label_37: // string_esc_universal_7
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_38; // string_esc_universal_6
}break;
}
}
{
state_label_38: // string_esc_universal_6
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_39; // string_esc_universal_5
}break;
}
}
{
state_label_39: // string_esc_universal_5
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_40; // string_esc_universal_4
}break;
}
}
{
state_label_40: // string_esc_universal_4
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_41; // string_esc_universal_3
}break;
}
}
{
state_label_41: // string_esc_universal_3
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_42; // string_esc_universal_2
}break;
}
}
{
state_label_42: // string_esc_universal_2
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_43; // string_esc_universal_1
}break;
}
}
{
state_label_43: // string_esc_universal_1
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_31; // string
}
}
switch (*state.ptr){
default:
{
goto state_label_31; // string
}break;
case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:
case 0x37:case 0x38:case 0x39:case 0x41:case 0x42:case 0x43:case 0x44:
case 0x45:case 0x46:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:
case 0x66:
{
state.ptr += 1;
goto state_label_31; // string
}break;
}
}
{
state_label_44: // raw_string_get_delim
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_EOF;
token.kind = 0;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
result = true;
goto end;
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_44; // raw_string_get_delim
}break;
case 0x20:case 0x29:case 0x5c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x28:
{
state.delim_one_past_last = state.ptr;
state.ptr += 1;
goto state_label_45; // raw_string_find_close
}break;
}
}
{
state_label_45: // raw_string_find_close
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_EOF;
token.kind = 0;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
result = true;
goto end;
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_45; // raw_string_find_close
}break;
case 0x29:
{
state.ptr += 1;
goto state_label_46; // raw_string_try_delim
}break;
}
}
{
state_label_46: // raw_string_try_delim
u64 delim_length = state.delim_one_past_last - state.delim_first;
u64 parse_length = 0;
for (;;){
if (parse_length == delim_length){
goto state_label_47; // raw_string_try_quote
}
if (state.ptr == state.opl_ptr){
goto state_label_47; // raw_string_try_quote
}
if (*state.ptr == state.delim_first[parse_length]){
state.ptr += 1;
parse_length += 1;
}
else{
goto state_label_45; // raw_string_find_close
}
}
}
{
state_label_47: // raw_string_try_quote
if (state.ptr == state.opl_ptr){
if ((true)){
goto state_label_45; // raw_string_find_close
}
}
switch (*state.ptr){
default:
{
goto state_label_45; // raw_string_find_close
}break;
case 0x22:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
if (HasFlag(state.flags_ZF0, 0x4)){
token.sub_kind = TokenGLSLKind_LiteralStringWideRaw;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x8)){
token.sub_kind = TokenGLSLKind_LiteralStringUTF8Raw;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x10)){
token.sub_kind = TokenGLSLKind_LiteralStringUTF16Raw;
token.kind = 10;
break;
}
if (HasFlag(state.flags_ZF0, 0x20)){
token.sub_kind = TokenGLSLKind_LiteralStringUTF32Raw;
token.kind = 10;
break;
}
token.sub_kind = TokenGLSLKind_LiteralStringRaw;
token.kind = 10;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_48: // comment_block
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_BlockComment;
token.kind = 3;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_EOF;
token.kind = 0;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
result = true;
goto end;
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_48; // comment_block
}break;
case 0x0a:
{
state.ptr += 1;
state.flags_KB0 &= ~(0x1);
goto state_label_48; // comment_block
}break;
case 0x2a:
{
state.ptr += 1;
goto state_label_49; // comment_block_try_close
}break;
}
}
{
state_label_49: // comment_block_try_close
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_BlockComment;
token.kind = 3;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_EOF;
token.kind = 0;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
result = true;
goto end;
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_48; // comment_block
}break;
case 0x2a:
{
state.ptr += 1;
goto state_label_49; // comment_block_try_close
}break;
case 0x2f:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_BlockComment;
token.kind = 3;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_50: // comment_line
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LineComment;
token.kind = 3;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_50; // comment_line
}break;
case 0x0a:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LineComment;
token.kind = 3;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x5c:
{
state.ptr += 1;
goto state_label_51; // comment_line_backslashing
}break;
}
}
{
state_label_51: // comment_line_backslashing
if (state.ptr == state.opl_ptr){
if ((true)){
result = true;
goto end;
}
}
switch (*state.ptr){
default:
{
state.ptr += 1;
goto state_label_50; // comment_line
}break;
case 0x0d:
{
state.ptr += 1;
goto state_label_51; // comment_line_backslashing
}break;
}
}
{
state_label_52: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Colon;
token.kind = 15;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Colon;
token.kind = 15;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3a:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_ColonColon;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_53: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Plus;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Plus;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2b:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PlusPlus;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PlusEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_54: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Minus;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Minus;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_MinusMinus;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_MinusEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3e:
{
state.ptr += 1;
goto state_label_55; // op stage
}break;
}
}
{
state_label_55: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Arrow;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Arrow;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2a:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_ArrowStar;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_56: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Less;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Less;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3c:
{
state.ptr += 1;
goto state_label_65; // op stage
}break;
case 0x3d:
{
state.ptr += 1;
goto state_label_58; // op stage
}break;
}
}
{
state_label_57: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Grtr;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Grtr;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_GrtrEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3e:
{
state.ptr += 1;
goto state_label_66; // op stage
}break;
}
}
{
state_label_58: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LessEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LessEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3e:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Compare;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_59: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Eq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Eq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_EqEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_60: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Not;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Not;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_NotEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_61: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_And;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_And;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x26:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_AndAnd;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_62: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Or;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Or;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x7c:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_OrOr;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_63: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Star;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Star;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_StarEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_64: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Mod;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_Mod;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_ModEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_65: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LeftLeft;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LeftLeft;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LeftLeftEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_66: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_RightRight;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_RightRight;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x3d:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_RightRightEq;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_67: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PPStringify;
token.kind = 15;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PPStringify;
token.kind = 15;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x23:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_PPConcat;
token.kind = 15;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
{
state_label_68: // op stage
if (state.ptr == state.opl_ptr){
if ((true)){
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}
}
switch (*state.ptr){
default:
{
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_LexError;
token.kind = 2;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
case 0x2e:
{
state.ptr += 1;
{
Token token = {};
token.pos = (i64)(state.emit_ptr - state.base);
token.size = (i64)(state.ptr - state.emit_ptr);
token.flags = state.flags_KB0;
do{
token.sub_kind = TokenGLSLKind_DotDotDot;
token.kind = 7;
}while(0);
token_list_push(arena, list, &token);
emit_counter += 1;
state.emit_ptr = state.ptr;
if (emit_counter == max){
goto end;
}
}
state.flags_ZF0 = 0;
goto state_label_1; // root
}break;
}
}
end:;
block_copy_struct(state_ptr, &state);
return(result);
}
internal Token_List
lex_full_input_glsl(Arena *arena, String_Const_u8 input){
Lex_State_GLSL state = {};
lex_full_input_glsl_init(&state, input);
Token_List list = {};
lex_full_input_glsl_breaks(arena, &list, &state, max_u64);
return(list);
}
